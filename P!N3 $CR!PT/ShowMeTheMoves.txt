//By @Ameya_Kanetkar
//@version=6
indicator("ShowMeTheMoves", shorttitle="SMTM", precision=4)

if not timeframe.isdaily
    runtime.error("Please switch timeframe to Daily")

string i_calc = input.string("Daily Close", "Calculation Method", ["Daily Close", "Intraday High-Low"])
int i_year_start = input.int(2005, "Start Year")
string i_text_size = input.string(size.auto, "Text Size", [size.auto, size.tiny, size.small, size.normal, size.large, size.huge])
string i_pos_str = input.string("top_right", "Table Position", ["top_right", "middle_center", "bottom_left"])
int i_table_cols = input.int(8, "Table Width (Columns)", minval=7, maxval=20)  // Adjust to stretch horizontally if needed
int i_thresh_3_5 = input.int(10, "Highlight Threshold for 3-5% Moves", minval=0)
int i_thresh_5_9 = input.int(10, "Highlight Threshold for 5-9% Moves", minval=0)
int i_thresh_9_plus = input.int(10, "Highlight Threshold for 9%+ Moves", minval=0)

// Map string to actual position constant
table_pos = switch i_pos_str
    "top_right" => position.top_right
    "middle_center" => position.middle_center
    "bottom_left" => position.bottom_left
    => position.top_right  // Default fallback

// Persist these on first bar for historical accumulation
var int year_start_ = math.max(year, i_year_start)
var int no_years_ = year(timenow) - year_start_ + 1
var matrix<float> data_ = matrix.new<float>(no_years_, 5, 0.0)  // [3-5%, 5-9%, 9%+, Max DD, Max Gains]
var table t = na

// Calculate percentage change
float chg_pct = i_calc == "Daily Close" ? math.abs(nz(close / close[1] - 1)) : math.abs((high - low) / close)

// Categorize moves (exclusive buckets)
int move3_5 = 0
int move5_9 = 0
int move9_plus = 0
switch
    chg_pct >= 0.09 => move9_plus := 1
    chg_pct >= 0.05 => move5_9 := 1
    chg_pct >= 0.03 => move3_5 := 1

// Variables for max gains/drawdown (persistent across bars)
var float minClose = close
var float maxClose = close
var float maxDrawdown = 0.0
var float maxGain = 0.0

// Reset on year change (explicit bool condition)
if ta.change(year) != 0
    minClose := close
    maxClose := close
    maxDrawdown := 0.0
    maxGain := 0.0

// Accumulate data if in range (runs on every historical bar)
if year >= year_start_
    int row = year - year_start_

    // Store move counts
    matrix.set(data_, row, 0, matrix.get(data_, row, 0) + move3_5)
    matrix.set(data_, row, 1, matrix.get(data_, row, 1) + move5_9)
    matrix.set(data_, row, 2, matrix.get(data_, row, 2) + move9_plus)

    // Update min/max close
    minClose := math.min(minClose, close)
    maxClose := math.max(maxClose, close)

    // Calculate and store max drawdown/gain
    float dd = close / maxClose - 1.0
    maxDrawdown := math.min(maxDrawdown, dd)
    matrix.set(data_, row, 3, maxDrawdown)

    float gain = close / minClose - 1.0
    maxGain := math.max(maxGain, gain)
    matrix.set(data_, row, 4, maxGain)

// Build table on last bar (full data, no scrolling)
if barstate.islast
    t := table.new(table_pos, i_table_cols, no_years_ + 3, border_width=1)  // +3 for header + data + footer

    // Header row
    table.cell(t, 1, 0, "3-5% Move", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 2, 0, "5-9% Move", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 3, 0, "9%+ Move", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 4, 0, "Total Moves", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 5, 0, "Max Gains", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 6, 0, "Max DD", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)

    // Data rows (all years)
    for int r = 0 to no_years_ - 1
        table.cell(t, 0, r + 1, str.tostring(r + year_start_), text_color=color.white, bgcolor=color.gray, text_size=i_text_size)

        // Move counts with customizable highlighting
        float count3_5 = matrix.get(data_, r, 0)
        float count5_9 = matrix.get(data_, r, 1)
        float count9_plus = matrix.get(data_, r, 2)
        float total_moves = count3_5 + count5_9 + count9_plus

        // Highlight for 3-5%
        color txt3_5 = count3_5 >= i_thresh_3_5 ? color.green : color.white
        color bg3_5 = count3_5 >= i_thresh_3_5 ? color.new(color.green, 50) : color.new(color.black, 80)
        table.cell(t, 1, r + 1, str.tostring(count3_5, "#"), text_color=txt3_5, bgcolor=bg3_5, text_size=i_text_size)

        // Highlight for 5-9%
        color txt5_9 = count5_9 >= i_thresh_5_9 ? color.green : color.white
        color bg5_9 = count5_9 >= i_thresh_5_9 ? color.new(color.green, 50) : color.new(color.black, 80)
        table.cell(t, 2, r + 1, str.tostring(count5_9, "#"), text_color=txt5_9, bgcolor=bg5_9, text_size=i_text_size)

        // Highlight for 9%+
        color txt9_plus = count9_plus >= i_thresh_9_plus ? color.green : color.white
        color bg9_plus = count9_plus >= i_thresh_9_plus ? color.new(color.green, 50) : color.new(color.black, 80)
        table.cell(t, 3, r + 1, str.tostring(count9_plus, "#"), text_color=txt9_plus, bgcolor=bg9_plus, text_size=i_text_size)

        table.cell(t, 4, r + 1, str.tostring(total_moves, "#"), text_color=color.white, bgcolor=color.new(color.black, 80), text_size=i_text_size)

        // Max Gains with transparency
        float valGain = matrix.get(data_, r, 4)
        int gainTransp = valGain >= 0.40 ? 50 : valGain >= 0.30 ? 60 : valGain >= 0.20 ? 70 : valGain >= 0.10 ? 80 : 90
        table.cell(t, 5, r + 1, str.tostring(valGain, "#.##%"), text_color=color.green, bgcolor=color.new(color.green, gainTransp), text_size=i_text_size)

        // Max Drawdown with transparency
        float valDD = matrix.get(data_, r, 3)
        int ddTransp = math.abs(valDD) > 0.40 ? 50 : math.abs(valDD) > 0.30 ? 60 : math.abs(valDD) > 0.20 ? 70 : math.abs(valDD) > 0.10 ? 80 : 90
        table.cell(t, 6, r + 1, str.tostring(valDD, "#.##%"), text_color=color.red, bgcolor=color.new(color.red, ddTransp), text_size=i_text_size)

    // Footer row: Grand totals for each bucket and overall total moves (uses ALL years)
    int footer_row = no_years_ + 1
    table.cell(t, 0, footer_row, "Total", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)

    float sum3_5 = 0.0
    float sum5_9 = 0.0
    float sum9_plus = 0.0
    for int r = 0 to no_years_ - 1
        sum3_5 += matrix.get(data_, r, 0)
        sum5_9 += matrix.get(data_, r, 1)
        sum9_plus += matrix.get(data_, r, 2)

    float grand_total = sum3_5 + sum5_9 + sum9_plus
    float pct3_5 = grand_total == 0 ? 0 : (sum3_5 / grand_total) * 100
    float pct5_9 = grand_total == 0 ? 0 : (sum5_9 / grand_total) * 100
    float pct9_plus = grand_total == 0 ? 0 : (sum9_plus / grand_total) * 100

    table.cell(t, 1, footer_row, str.format("{0,number,#} ({1,number,#}%)", sum3_5, pct3_5), text_color=color.white, bgcolor=color.new(color.black, 80), text_size=i_text_size)
    table.cell(t, 2, footer_row, str.format("{0,number,#} ({1,number,#}%)", sum5_9, pct5_9), text_color=color.white, bgcolor=color.new(color.black, 80), text_size=i_text_size)
    table.cell(t, 3, footer_row, str.format("{0,number,#} ({1,number,#}%)", sum9_plus, pct9_plus), text_color=color.white, bgcolor=color.new(color.black, 80), text_size=i_text_size)
    table.cell(t, 4, footer_row, str.tostring(grand_total, "#"), text_color=color.white, bgcolor=color.new(color.black, 80), text_size=i_text_size)
    // No totals for Max Gains/DD as they are per-year metrics (leave blank)
    table.cell(t, 5, footer_row, "", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
    table.cell(t, 6, footer_row, "", text_color=color.white, bgcolor=color.gray, text_size=i_text_size)
