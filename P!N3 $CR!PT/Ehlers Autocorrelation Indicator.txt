    // ____  __    ___   ________ ___________  ___________ __  ____ ___ 
   // / __ )/ /   /   | / ____/ //_/ ____/   |/_  __<  / // / / __ |__ \
  // / __  / /   / /| |/ /   / ,< / /   / /| | / /  / / // /_/ / / __/ /
 // / /_/ / /___/ ___ / /___/ /| / /___/ ___ |/ /  / /__  __/ /_/ / __/ 
// /_____/_____/_/  |_\____/_/ |_\____/_/  |_/_/  /_/  /_/  \____/____/                                              

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© blackcat1402
//@version=5
indicator(title='[blackcat] L2 Ehlers Autocorrelation Indicator V2', shorttitle='BCL2EAI V2', overlay=false)

// Inputs
avgLength = input(0, title='AvgLength')

// Function to calculate Ehlers Autocorrelation Indicator
calculate_ehlers_autocorrelation(close_price, avg_length) =>
    // Initialize variables
    alpha1 = 0.0
    hp = 0.0
    a1 = 0.0
    b1 = 0.0
    c1 = 0.0
    c2 = 0.0
    c3 = 0.0
    filt = 0.0
    m = 0.0
    n = 0.0
    x = 0.0
    y = 0.0
    sx = 0.0
    sy = 0.0
    sxx = 0.0
    syy = 0.0
    sxy = 0.0
    pi = 2 * math.asin(1)

    // Initialize correlation array
    corr = array.new_float(62)

    // Highpass filter
    alpha1 := (math.cos(.707 * 2 * pi / 48) + math.sin(.707 * 2 * pi / 48) - 1) / math.cos(.707 * 2 * pi / 48)
    hp := (1 - alpha1 / 2) * (1 - alpha1 / 2) * (close_price - 2 * nz(close_price[1]) + nz(close_price[2])) + 2 * (1 - alpha1) * nz(hp[1]) - (1 - alpha1) * (1 - alpha1) * nz(hp[2])

    // Super Smoother Filter
    a1 := math.exp(-1.414 * 3.14159 / 10)
    b1 := 2 * a1 * math.cos(1.414 * pi / 10)
    c2 := b1
    c3 := -a1 * a1
    c1 := 1 - c2 - c3
    filt := c1 * (hp + nz(hp[1])) / 2 + c2 * nz(filt[1]) + c3 * nz(filt[2])

    // Calculate Pearson correlation for each lag
    for lag = 0 to 60 by 1
        m := avg_length == 0 ? lag + 1 : avg_length
        sx := 0
        sy := 0
        sxx := 0
        syy := 0
        sxy := 0

        for count = 0 to m - 1 by 1
            x := nz(filt[count])
            y := nz(filt[lag + count])
            sx += x
            sy += y
            sxx += x * x
            sxy += x * y
            syy += y * y
            syy

        if (m * sxx - sx * sx) * (m * syy - sy * sy) > 0
            array.set(corr, lag, (m * sxy - sx * sy) / math.sqrt((m * sxx - sx * sx) * (m * syy - sy * sy)))
        array.set(corr, lag, .5 * (array.get(corr, lag) + 1))

    corr

// Call the function
correlation_array = calculate_ehlers_autocorrelation(close, avgLength)

// Plot the results
plot1 = plot(1, 'S1', color=array.get(correlation_array, 1) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 1)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 1), 0), linewidth=8)
plot2 = plot(2, 'S2', color=array.get(correlation_array, 2) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 2)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 2), 0), linewidth=8)
plot4 = plot(4, 'S4', color=array.get(correlation_array, 4) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 4)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 4), 0), linewidth=8)
plot6 = plot(6, 'S6', color=array.get(correlation_array, 6) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 6)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 6), 0), linewidth=8)
plot8 = plot(8, 'S8', color=array.get(correlation_array, 8) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 8)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 8), 0), linewidth=8)
plot10 = plot(10, 'S10', color=array.get(correlation_array, 10) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 10)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 10), 0), linewidth=8)
plot12 = plot(12, 'S12', color=array.get(correlation_array, 12) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 12)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 12), 0), linewidth=8)
plot14 = plot(14, 'S14', color=array.get(correlation_array, 14) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 14)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 14), 0), linewidth=8)
plot16 = plot(16, 'S16', color=array.get(correlation_array, 16) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 16)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 16), 0), linewidth=8)
plot18 = plot(18, 'S18', color=array.get(correlation_array, 18) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 18)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 18), 0), linewidth=8)
plot20 = plot(20, 'S20', color=array.get(correlation_array, 20) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 20)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 20), 0), linewidth=8)
plot22 = plot(22, 'S22', color=array.get(correlation_array, 22) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 22)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 22), 0), linewidth=8)
plot24 = plot(24, 'S24', color=array.get(correlation_array, 24) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 24)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 24), 0), linewidth=8)
plot26 = plot(26, 'S26', color=array.get(correlation_array, 26) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 26)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 26), 0), linewidth=8)
plot28 = plot(28, 'S28', color=array.get(correlation_array, 28) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 28)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 28), 0), linewidth=8)
plot30 = plot(30, 'S30', color=array.get(correlation_array, 30) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 30)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 30), 0), linewidth=8)
plot32 = plot(32, 'S32', color=array.get(correlation_array, 32) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 32)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 32), 0), linewidth=8)
plot34 = plot(34, 'S34', color=array.get(correlation_array, 34) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 34)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 34), 0), linewidth=8)
plot36 = plot(36, 'S36', color=array.get(correlation_array, 36) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 36)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 36), 0), linewidth=8)
plot38 = plot(38, 'S38', color=array.get(correlation_array, 38) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 38)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 38), 0), linewidth=8)
plot40 = plot(40, 'S40', color=array.get(correlation_array, 40) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 40)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 40), 0), linewidth=8)
plot42 = plot(42, 'S42', color=array.get(correlation_array, 42) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 42)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 42), 0), linewidth=8)
plot44 = plot(44, 'S44', color=array.get(correlation_array, 44) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 44)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 44), 0), linewidth=8)
plot46 = plot(46, 'S46', color=array.get(correlation_array, 46) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 46)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 46), 0), linewidth=8)
plot48 = plot(48, 'S48', color=array.get(correlation_array, 48) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 48)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 48), 0), linewidth=8)
plot50 = plot(50, 'S50', color=array.get(correlation_array, 50) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 50)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 50), 0), linewidth=8)
plot52 = plot(52, 'S52', color=array.get(correlation_array, 52) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 52)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 52), 0), linewidth=8)
plot54 = plot(54, 'S54', color=array.get(correlation_array, 54) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 54)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 54), 0), linewidth=8)
plot56 = plot(56, 'S56', color=array.get(correlation_array, 56) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 56)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 56), 0), linewidth=8)
plot58 = plot(58, 'S58', color=array.get(correlation_array, 58) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 58)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 58), 0), linewidth=8)
plot60 = plot(60, 'S60', color=array.get(correlation_array, 60) > .5 ? color.rgb(255 * (2 - 2 * array.get(correlation_array, 60)), 255, 0) : color.rgb(255, 2 * 255 * array.get(correlation_array, 60), 0), linewidth=8)

