// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tkarolak

//@version=6

// @description The NormalDistributionFunctions library encompasses a comprehensive suite of statistical tools for financial market analysis. It provides functions to calculate essential statistical measures such as mean, standard deviation, skewness, and kurtosis, alongside advanced functionalities for computing the probability density function (PDF), cumulative distribution function (CDF), Z-score, and confidence intervals. This library is designed to assist in the assessment of market volatility, distribution characteristics of asset returns, and risk management calculations, making it an invaluable resource for traders and financial analysts.
library("NormalDistributionFunctions", true)

//@function Calculates and returns the mean and standard deviation for a given data series over a specified period.
//@param source (float): The data series to analyze.
//@param length (int): The lookback period for the calculation.
//@returns Returns an array where the first element is the mean and the second element is the standard deviation of the data series for the given period.
export meanAndStdDev(float source, int length) =>
    [ta.sma(source, length), ta.stdev(source, length)]

// @function Calculates average and standard deviation for filtered discontinuous data based on a condition.
// @param condition (bool): A boolean condition to filter data for inclusion.
// @param source (float): The data point to consider for inclusion based on the condition.
// @param size (int): The maximum size of the data array; older data points are removed if exceeded.
// @returns: A tuple containing the average and standard deviation of the filtered data set.
export meanAndStdDevFiltered(bool condition, float source, int size) =>
    var data = array.new_float()
    if condition
        data.push(source)
    if data.size() > size
        data.shift()
    [data.avg(), data.stdev()]

// @function Calculates and returns the lower and upper bounds of a range based on the mean, standard deviation, and z-score.
// @param mean (float): The mean of the distribution.
// @param stdDev (float): The standard deviation of the distribution.
// @param zScore (float): The z-score representing the number of standard deviations from the mean.
// @returns Returns an array where the first element is the lower bound and the second element is the upper bound of the range.
export calculateZScoreRange(float mean, float stdDev, float zScore) =>
    [mean - zScore * stdDev, mean + zScore * stdDev]

//@function Calculates and returns skewness for a given data series over a specified period.
//@param source (float): The data series to analyze.
//@param mean (float): The mean of the distribution.
//@param stdDev (float): The standard deviation of the distribution.
//@param length (int): The lookback period for the calculation.
//@returns Returns skewness value
export skewness(float source, float mean, float stdDev, int length) =>
    // Calculate the third central moment of the source over the specified length
    float moment3 = ta.sma(math.pow(source - mean, 3), length)
    // Calculate the skewness coefficient using the standard deviation
    moment3 / math.pow(stdDev, 3)

// Kurtosis is a statistical measure that describes the shape of a distribution's tails in relation to its overall shape, 
// particularly how heavy or light these tails are compared to a normal distribution. Kurtosis is often used in finance
// to measure the risk of investments, as it reflects the likelihood of extreme positive or negative returns.
// - High kurtosis (>3): The distribution has heavier tails and a sharper peak compared to a normal distribution.
// This indicates a higher risk of extreme outcomes.
// - Low kurtosis (<3): The distribution has lighter tails and is more flat compared to a normal distribution.
// This indicates a lower risk of extreme outcomes.
// - Kurtosis of 3: This is characteristic of a normal distribution (mesokurtic). Distributions with a kurtosis of 
// exactly 3 are considered to have tails that are similar to the normal distribution's tails.

//@function Calculates and returns kurtosis for a given data series over a specified period.
//@param source (float): The data series to analyze.
//@param mean (float): The mean of the distribution.
//@param stdDev (float): The standard deviation of the distribution.
//@param length (int): The lookback period for the calculation.
//@returns Returns kurtosis value
export kurtosis(float source, float mean, float stdDev, int length) =>
    // Calculate the fourth central moment of the source over the specified length
    float moment4 = ta.sma(math.pow(source - mean, 4), length)
    // Calculate the kurtosis coefficient using the standard deviation
    // Kurtosis formula: [E((X - µ)^4)] / σ^4
    // Excess Kurtosis formula (commonly used): Kurtosis - 3
    (moment4 / math.pow(stdDev, 4)) - 3

// The PDF for a normal distribution can help determine the likelihood of a specific outcome within a continuous range.
// It's fundamental for risk assessment and pricing models.
//@function pdf: Calculates the probability density function for a given value within a normal distribution.
//@param x (float): The value to evaluate the PDF at.
//@param mean (float): The mean of the distribution.
//@param stdDev (float): The standard deviation of the distribution.
//@returns Returns the probability density function value for x.
export pdf(float x, float mean, float stdDev) =>
    float pi = 3.141592653589793
    float e = 2.718281828459045
    float exponent = -math.pow((x - mean), 2) / (2 * math.pow(stdDev, 2))
    (1 / (stdDev * math.sqrt(2 * pi))) * math.pow(e, exponent)

// Example usage
//size = 100
//[mean, stdDev] = meanAndStdDev(close,size)
//pdfValue = pdf(close, mean, stdDev)
//plot(pdfValue, title="PDF Value", color=color.blue)

// The CDF can be used to determine the probability that a random variable in a distribution is less than or equal to a certain value. 
// It's crucial for calculating tail risk and value at risk (VaR).
//@function cdf: Calculates the cumulative distribution function for a given value within a normal distribution.
//@param x (float): The value to evaluate the CDF at.
//@param mean (float): The mean of the distribution.
//@param stdDev (float): The standard deviation of the distribution.
//@returns Returns the cumulative distribution function value for x.
export cdf(float x, float mean, float stdDev) =>
    float z = (x - mean) / stdDev
    float t = 1 / (1 + 0.2316419 * math.abs(z))
    float d1 = 0.319381530 * t
    float d2 = -0.356563782 * math.pow(t, 2)
    float d3 = 1.781477937 * math.pow(t, 3)
    float d4 = -1.821255978 * math.pow(t, 4)
    float d5 = 1.330274429 * math.pow(t, 5)
    float pdf = math.exp(-0.5 * math.pow(z, 2)) / math.sqrt(2 * math.pi)
    float cdfApprox = 1.0 - pdf * (d1 + d2 + d3 + d4 + d5)
    z < 0 ? 1.0 - cdfApprox : cdfApprox

// The Z-score function standardizes any data point by subtracting the mean and dividing by the standard deviation. 
// It's used to determine how many standard deviations away a particular value is from the mean.
//@function zScore: Calculates the Z-score for a given value.
//@param x (float): The value to calculate the Z-score for.
//@param mean (float): The mean of the data series.
//@param stdDev (float): The standard deviation of the data series.
//@returns Returns the Z-score of x.
export zScore(float x, float mean, float stdDev) =>
    (x - mean) / stdDev

// Confidence intervals can be calculated to understand the range within which the true mean of the dataset is expected to lie, 
// with a certain level of confidence. This is useful for hypothesis testing and evaluating the reliability of statistical estimates.
//@function Calculates the confidence interval for a data series mean.
//@param mean (float): The mean of the data series.
//@param stdDev (float): The standard deviation of the data series.
//@param size (int): The sample size.
//@param confidenceLevel (float): The confidence level (e.g., 0.95 for 95% confidence).
//@returns Returns the lower and upper bounds of the confidence interval.
export confidenceInterval(float mean, float stdDev, int size, float confidenceLevel) =>
    float zScore = na
    // Z-scores for common confidence levels
    if confidenceLevel == 0.90
        zScore := 1.645
    else if confidenceLevel == 0.95
        zScore := 1.96
    else if confidenceLevel == 0.99
        zScore := 2.576
    else
        zScore := na
    float marginError = zScore * (stdDev / math.sqrt(size))
    [mean - marginError, mean + marginError]

// Example usage
//size = 100
//[mean, stdDev] = meanAndStdDev(close,size)
//confidenceLevel = 0.95 // 95% confidence level
//[lowerBound, upperBound] = confidenceInterval(mean, stdDev, size, confidenceLevel)
//plot(lowerBound, title="Lower Bound", color=color.red)
//plot(upperBound, title="Upper Bound", color=color.green)