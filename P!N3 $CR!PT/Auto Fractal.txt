// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TheUltimator5

//@version=6
indicator("Auto Fractal [theUltimator5]", overlay=true)

l = input.int(20, title="Correlation Window Length", minval=10)
lb = input.int(300, title="Lookback Range", minval=50)
future = input.int(20, title="Future Projection Length", minval=1)
showTable = input.bool(true, title="Show Correlation Match Table")


// Enforce constraint
lb := lb < l + 1 + future ? l + 1 + future : lb  // ensure room for future projection

var float maxCorr = na
var int bestOffset = na
var float[] bestFit = array.new_float(l, 0.0)
var float[] futureSegment = array.new_float(future, 0.0)
var line[] segmentLines = array.new_line()

var float base = na
var float target = na
var float scaleFactor = na

// Manual Pearson correlation
calcCorr(_a, _b, _len) =>
    float sumA = 0.0, sumB = 0.0
    for i = 0 to _len - 1
        sumA += array.get(_a, i)
        sumB += array.get(_b, i)
    float meanA = sumA / _len
    float meanB = sumB / _len

    float num = 0.0, denA = 0.0, denB = 0.0
    for i = 0 to _len - 1
        float da = array.get(_a, i) - meanA
        float db = array.get(_b, i) - meanB
        num += da * db
        denA += da * da
        denB += db * db
    num / math.sqrt(denA * denB)

// Main logic
if bar_index >= lb
    maxCorr := na
    bestOffset := na

    for i = l to lb - l - future
        arrPast = array.new_float(l)
        arrRecent = array.new_float(l)
        for j = 0 to l - 1
            array.set(arrPast, j, close[i + j])
            array.set(arrRecent, j, close[j])
        corr = calcCorr(arrPast, arrRecent, l)
        if not na(corr) and (na(maxCorr) or corr > maxCorr)
            maxCorr := corr
            bestOffset := i
            for j = 0 to l - 1
                array.set(bestFit, j, close[i + j])
            for j = 0 to future - 1
                array.set(futureSegment, j, close[i - j])
            base := close[i]
            target := close[0]
            scaleFactor :=  (array.max(bestFit)-array.min(bestFit)) / (ta.highest(close,l) - ta.lowest(close,l))




// Clear old lines
if bar_index > lb
    for k = 0 to array.size(segmentLines) - 1
        line.delete(array.get(segmentLines, k))
    array.clear(segmentLines)

// Plot best-fit segment (normalized)
if array.size(bestFit) == l and not na(base) and not na(target)
    for j = 0 to l - 2
        rel1 = (array.get(bestFit, j) - base)/scaleFactor
        rel2 = (array.get(bestFit, j + 1) - base)/scaleFactor
        y1 = (target + rel1)
        y2 = (target + rel2)
        x1 = bar_index - j
        x2 = bar_index - (j + 1)
        ln = line.new(x1, y1, x2, y2, color=color.orange, width=2)
        array.push(segmentLines, ln)

// Plot future projection segment (normalized)
futureBase = array.get(futureSegment, 0)
if array.size(futureSegment) == future and not na(futureBase) and not na(target)
    for j = 0 to future - 2
        val1 = array.get(futureSegment, j)/scaleFactor
        val2 = array.get(futureSegment, j + 1)/scaleFactor
        rel1 = val1 - futureBase/scaleFactor
        rel2 = val2 - futureBase/scaleFactor
        y1 = target + rel1
        y2 = target + rel2
        x1 = bar_index + j + 1
        x2 = bar_index + j + 2
        lnF = line.new(x1, y1, x2, y2, color=color.new(color.rgb(227, 50, 209),10), style=line.style_dotted, width=2)
        array.push(segmentLines, lnF)

    // === Draw box around source segment ===
var box matchBox = na
if not na(bestOffset)
    if not na(matchBox)
        box.delete(matchBox)

    int boxX1 = bar_index - (l - 1) - bestOffset
    int boxX2 = bar_index - bestOffset
    float yTop = ta.highest(close[bestOffset], l)
    float yBottom = ta.lowest(close[bestOffset], l)

    matchBox := box.new(
         left=boxX1,
         right=boxX2,
         top=yTop,
         bottom=yBottom,
         border_color=color.new(color.green, 0),
         bgcolor=color.new(color.green, 85)
     )

    //Table
    var table corrTable = table.new(position.top_right, 1, 1, border_width=1)
    if showTable and not na(maxCorr)
        table.cell(corrTable, 0, 0, text="Best Correlation: " + str.tostring(maxCorr*100, format.percent), text_color=color.white, bgcolor=color.new(color.blue, 30))
    else
        table.clear(corrTable, start_row=0, start_column=0)