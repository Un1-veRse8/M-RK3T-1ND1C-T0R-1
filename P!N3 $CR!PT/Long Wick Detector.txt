// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=6
indicator('Long Wick Detector [LuxAlgo]','LuxAlgo - Long Wick Detector', overlay = true, max_lines_count = 500, max_labels_count = 500, behind_chart = false)
//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
GREEN                   = #089981
RED                     = #F23645

BULLISH                 = 1
BEARISH                 = 0

STYLE_GROUP             = 'STYLE'

thresholdInput          = input.float(  2.0,    'Wick Threshold',  minval=0.25,step=0.25)
locationInput           = input.int(    100,    'Level %',         minval = 0, maxval = 100) / 100
windowInput             = input.bool(   true,   'Max Duration',    inline = 'window')
windowSizeInput         = input.int(    1000,   '',                inline = 'window', minval=10)
mitigatedWicksInput     = input.bool(   true,   'Mitigated Wicks')

candleGradientInput     = input.bool(   true,   'Wick Based Transparency',  group = STYLE_GROUP)
candleColorInput        = input.bool(   false,  'Breakout Based Color',     group = STYLE_GROUP)
bearishColorInput       = input.color(  RED,    '',                         group = STYLE_GROUP, inline = 'colors')
bullishColorInput       = input.color(  GREEN,  '',                         group = STYLE_GROUP, inline = 'colors')

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES & VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
type wick
    float   level       = na
    int     index       = na
    int     bias        = na
    line    l_ine       = na
    label   l_abel      = na    

type bar
    color c_olor = na

var array<wick> wicks   = array.new<wick>()
var bar currentBar      = bar.new()
float volatility        = nz(ta.atr(200), ta.cum(high - low) / (bar_index + 1)) * thresholdInput

//---------------------------------------------------------------------------------------------------------------------}
//USER-DEFINED FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
newLine(float level, color c_olor) => line.new(chart.point.now(level),chart.point.new(last_bar_time + 10*(time-time[1]),last_bar_index + 10,level),xloc = xloc.bar_time, color = c_olor)

newLabel(float level, color c_olor) => label.new(chart.point.new(last_bar_time + 10*(time-time[1]),last_bar_index + 10,level),str.tostring(level,format.mintick),xloc = xloc.bar_time,color = color(na),textcolor = c_olor,style = label.style_label_left, size = size.small)

fetchData() =>
    topWick     = (high - math.max(open,close)) >= math.round_to_mintick(volatility)
    bottomWick  = (math.min(open,close) - low)  >= math.round_to_mintick(volatility)

    if topWick
        float level = math.max(open,close) + math.round_to_mintick((high - math.max(open,close)) * locationInput)
        wicks.push(wick.new(level,bar_index,BULLISH,newLine(level,bullishColorInput), newLabel(level,bullishColorInput)))        

    if bottomWick
        float level = math.min(open,close) - math.round_to_mintick((math.min(open,close) - low) * locationInput)
        wicks.push(wick.new(level,bar_index,BEARISH,newLine(level,bearishColorInput), newLabel(level,bearishColorInput)))        

updateWicks() =>    
    array<int> indices = array.new<int>()

    for [index,eachWick] in wicks
        insideWindow = windowInput ? (bar_index - eachWick.index) <= windowSizeInput : true
        mitigatedWick = (eachWick.bias == BULLISH and close >= eachWick.level) or (eachWick.bias == BEARISH and close <= eachWick.level)

        if not insideWindow
            eachWick.l_ine.delete()                
            eachWick.l_abel.delete()            
            indices.push(index)
        else                 
            if mitigatedWick                
                currentBar.c_olor := eachWick.bias == BULLISH ?  bullishColorInput : bearishColorInput
                if mitigatedWicksInput
                    eachWick.l_ine.set_second_point(chart.point.now(eachWick.level))
                else
                    eachWick.l_ine.delete()
                eachWick.l_abel.delete()                
                indices.push(index)                

    int indexFix = 0
    for eachIndex in indices
        wicks.remove(eachIndex + indexFix)
        indexFix += -1

updateColor() =>
    color output    = na
    float maxWick   = math.max(high - math.max(open,close),math.min(open,close) - low)
    float maxValue  = 0.9 * math.round_to_mintick(volatility)
    float minValue  = 0.1 * math.round_to_mintick(volatility)
   
    candleColor = candleColorInput ? currentBar.c_olor : (close >= open ? bullishColorInput : bearishColorInput)
    output  := candleGradientInput ? color.from_gradient(maxWick,minValue,maxValue,color.new(candleColor,90),color.new(candleColor,0)) : candleColor

    output
                
//---------------------------------------------------------------------------------------------------------------------}
//MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------{
fetchData()
updateWicks()

int numberOfWicks   = wicks.size()
bool newWick        = numberOfWicks > 0 ? numberOfWicks > numberOfWicks[1] : false
float level         = newWick ? wicks.last().level : na
color c_olor        = numberOfWicks > 0 ? (wicks.last().bias == BEARISH ? bearishColorInput : bullishColorInput) : na

plot(level,'Large Wick',c_olor,style = plot.style_circles,linewidth = 2)
plotcandle(open,high,low,close,'Candle',updateColor(),updateColor(),bordercolor = updateColor())

//---------------------------------------------------------------------------------------------------------------------}