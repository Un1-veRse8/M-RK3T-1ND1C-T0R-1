// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© aibitcointrend

//@version=6
indicator("Relative Vigor Index (RVI) with EMD [AIBitcoinTrend]", overlay=false, max_polylines_count = 100, precision = 1)

viperiod  = input.int(10, minval=1, title="RVI Length", group="RVI", inline="") 
emdperiod = input.int(5, minval=1, title="EMD Period", group="RVI", inline="")
smooth  = input.int(5, minval=1, title="Final Smoothing", group="RVI", inline="")
rvi_raw = ta.wma(ta.sma(close - open, viperiod) / ta.sma(high - low, viperiod),smooth)
emd_component = rvi_raw - ta.wma(ta.sma(rvi_raw, emdperiod),smooth)

rvi=plot(rvi_raw, title="RVI", color=color.teal)
rviemd=plot(emd_component, title="EMD Approximated RVI", color=color.blue)

uppper=hline(0.35, "Overbought", color=color.red)
lowwer=hline(-0.35, "Oversold",   color=color.green)
midLinePlot = plot(0, color = chart.fg_color)
fill(uppper, lowwer, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
fill(rvi, midLinePlot, 0.35, 0.2, top_color = color.new(color.green, 0), bottom_color = color.new(color.green, 100),  title = "Overbought Gradient Fill")
fill(rvi, midLinePlot, -0.2,  -0.35,  top_color = color.new(color.red, 100), bottom_color = color.new(color.red, 0),      title = "Oversold Gradient Fill")
fill(rvi, rviemd, rvi_raw>emd_component?color.new(color.lime,80):color.new(color.red,80), na)

// Trailing Stop
// Crossover Trailing Stop
sig   = input.bool(true, title="Crosses Signals", group="Bullish/Bearish Signals", inline="")
trEn = input.bool(true, title='Crosses Trailing Stop', group="Trailing Stop", tooltip='Enable or disable the breakout trailing stop feature. When enabled, trailing stops are calculated based on ATR.')
m = input.float(3, minval=0.1, step=0.1, title='Trailing Multiplier', group="Trailing Stop", tooltip='ATR multiplier for calculating the trailing stop. Higher values result in wider stops, reducing the chance of premature exit.')
lw = input.int(1, minval=1, title='Trailing Line Width', group="Trailing Stop", tooltip='Width of the trailing stop line displayed on the chart.')
posClr = input.color(color.rgb(119, 255, 0), title='', group='Trailing Stop', inline='Style')
negClr = input.color(color.rgb(255, 0, 13), title='', group='Trailing Stop', inline='Style')
atr = ta.atr(100)

// Functions for Trailing Stop Updates 
f_updateBull(bullTrig, bullAct, preStop, ts, pts, cross, col, lw) =>
    var float newTS = ts
    var bool newActive = bullAct
    var bool actPlot = false
    if bullTrig or bullAct
        if bullTrig
            // New trigger: add starting point and set stop value.
            array.unshift(pts, chart.point.from_index(bar_index, preStop))
            newTS := preStop
            newActive := true
        else
            // Update stop: use the maximum of the new preStop or the current stop.
            array.unshift(pts, chart.point.from_index(bar_index, math.max(preStop, newTS)))
            newTS := math.max(preStop, newTS)
            actPlot := true
        // Exit condition: if the price crosses below the stop, reset state.
        if cross
            newActive := false
            newTS := float(na)
            polyline.new(pts, line_color = col, line_width = lw, force_overlay = true)
            array.clear(pts)
    [newTS, newActive, actPlot]

// f_updateBear: Updates bearish trailing stop state.
f_updateBear(bearTrig, bearAct, preStop, ts, pts, cross, col, lw) =>
    var float newTS = ts
    var bool newActive = bearAct
    var bool actPlot = false
    if bearTrig or bearAct
        if bearTrig
            // New trigger: add starting point and set stop value.
            array.unshift(pts, chart.point.from_index(bar_index, preStop))
            newTS := preStop
            newActive := true
        else
            // Update stop: use the minimum of the new preStop or the current stop.
            array.unshift(pts, chart.point.from_index(bar_index, math.min(preStop, newTS)))
            newTS := math.min(preStop, newTS)
            actPlot := true
        // Exit condition: if the price crosses above the stop, reset state.
        if cross
            newActive := false
            newTS := float(na)
            polyline.new(pts, line_color = col, line_width = lw, force_overlay = true)
            array.clear(pts)
    [newTS, newActive, actPlot]

// Global Variables and Pre-Calculations
// Initialize arrays and state variables for bullish and bearish trailing stops.
var ptsBull = array.new<chart.point>()    
var ptsBear = array.new<chart.point>()    
var polyline pBull = na                   
var polyline pBear = na                   
var bullPos = false                       
var bearPos = false                      
var tsBull = float(na)                    
var tsBear = float(na)                    

bool bullAct = false
bool bearAct = false                    

// Label Customization: colors and label size.
color bLblClr = color.new(color.green, 0) 
color rLblClr = color.new(color.red, 0)   
lblSz = size.normal                     

// Calculate RSI-based crossover conditions for signal generation.
sigalUp = ta.rising(emd_component,1)
signlDn = ta.falling(emd_component,1)
bool isB = ta.crossover(rvi_raw,  emd_component) and sigalUp
bool isBr = ta.crossunder(rvi_raw, emd_component) and signlDn

// Pre-calculate initial stop levels using ATR and multiplier.
float preBullStop = low - atr * m      
float preBearStop = high + atr * m          

// Determine if the price has crossed the trailing stop levels.
bool crossBull = ta.crossunder(close, tsBull) 
bool crossBear = ta.crossover(close, tsBear)  

// Define trailing stop triggers based on RSI conditions and trailing stop enable flag.
bool bullT = isB and not isB[1] and trEn    
bool bearT = isBr and not isBr[1] and trEn   

// Main Execution Using the Functions 
// Bullish Trailing Stop Update.
[newTSBull, newBullPos, newBullAct] = f_updateBull(bullT, bullPos, preBullStop, tsBull, ptsBull, crossBull, posClr, lw)
tsBull := newTSBull      
bullPos := newBullPos     
bullAct := newBullAct     
pBull.delete()          
if ptsBull.size() > 0
    pBull := polyline.new(ptsBull, false, false, line_color = posClr, line_width = lw, force_overlay = true)

// Bearish Trailing Stop Update.
[newTSBear, newBearPos, newBearAct] = f_updateBear(bearT, bearPos, preBearStop, tsBear, ptsBear, crossBear, negClr, lw)
tsBear := newTSBear       
bearPos := newBearPos    
bearAct := newBearAct     
pBear.delete()           
if ptsBear.size() > 0
    pBear := polyline.new(ptsBear, false, false, line_color = negClr, line_width = lw, force_overlay = true)

// Plotshape
plotshape(bullT and sig ? low - atr * m : na, location = location.absolute, style = shape.circle, color = posClr, size = size.tiny, title = 'Bullish Trailing Starts', force_overlay = true)
plotshape(bullT and newBullPos[1] == false  and sig? low - atr * m : na, location = location.absolute, style = shape.circle, color = color.new(posClr, 50), size = size.small, title = 'Bullish Trailing Starts', force_overlay = true)
plotshape(bearT and sig? high + atr * m : na, location = location.absolute, style = shape.circle, color = negClr, size = size.tiny, title = 'Bearish Trailing Starts', force_overlay = true)
plotshape(bearT and newBearPos[1] == false and sig? high + atr * m : na, location = location.absolute, style = shape.circle, color = color.new(negClr, 50), size = size.small, title = 'Bearish Trailing Starts', force_overlay = true)

plotshape(bullT and sig? rvi_raw : na, location = location.absolute, style = shape.circle, color = posClr, size = size.tiny, title = 'Bullish Trailing Starts')
plotshape(bullT and newBullPos[1] == false and sig? rvi_raw : na, location = location.absolute, style = shape.circle, color = color.new(posClr, 50), size = size.small, title = 'Bullish Trailing Starts')
plotshape(bearT and sig? rvi_raw : na, location = location.absolute, style = shape.circle, color = negClr, size = size.tiny, title = 'Bearish Trailing Starts')
plotshape(bearT and newBearPos[1] == false and sig? rvi_raw : na, location = location.absolute, style = shape.circle, color = color.new(negClr, 50), size = size.small, title = 'Bearish Trailing Starts')