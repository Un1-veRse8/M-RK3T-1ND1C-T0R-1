// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © MUQWISHI

//@version=6
indicator("Employee Portfolio [MUQWISHI]", max_lines_count = 500, max_labels_count = 500, dynamic_requests = true)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                   INPUT                                    |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// +++++++++++++ {Style}
var G1 = "Style Settings"

// Index Name
indNme = input.string("𝗠𝘆 𝗦𝗮𝘃𝗶𝗻𝗴 𝗣𝗼𝗿𝘁𝗳𝗼𝗹𝗶𝗼", "Index Name                  ", inline = "1", group = G1, display = display.none)

// Table Location 
tblPos = input.string(  "Top Right"    , "Table Settings            ", 
         ["Top Right" , "Middle Right" , "Bottom Right"     , 
          "Top Center", "Middle Center", "Bottom Center"    , 
          "Top Left"  , "Middle Left"  , "Bottom Left" ]    , inline = "1", display = display.none)

// Table Size
tblSiz = input.int(10, "", 0 , inline = "1", display = display.none)

// Sorting
sortBy = input.string("Return(%) Portfolio", "Sort Holdings By       ",             
               ["Symbols", "Return(%) Portfolio", "Weight(%) Portfolio", "None"], inline = "2", display = display.none)
sortOd = input.string("Descending", "", ["Ascending", "Descending"],              inline = "2", display = display.none)

// Index Plot Type
pltIdx = input.string("Return", "Index Plot Type         ", ["Assets", "Return", "Return(%)"], inline = "3", display = display.none)
pltTyp = input.string("Candle", "", ["Candle", "Bar", "Line"],                                 inline = "3", display = display.none)

// Colors
upColr = input.color(color.rgb(61, 158, 64), "UP|DOWN", inline = "4")
dnColr = input.color(color.red, "",                     inline = "4")

tBgCol = input.color(#5c698c, "   Table",               inline = "4")
cBgCol = input.color(#778899, "",                       inline = "4")
txtCol = input.color(#ffffff, "",                       inline = "4")

// Show & Hide
pltChk = input.bool(true, "Show Index Plot     ➤", inline = "5")
depChk = input.bool(true, "Show Deposit Label",     inline = "5")
indChk = input.bool(true, "Show Index Title")
spcChk = input.bool(true, "Show Portfolio Spacification")
tblChk = input.bool(true, "Show Portfolio Holdings")

// +++++++++++++ {Recurring Deposit}
var G2 = "Recurring Deposit Settings"
// Period
sTime  =  input.time(timestamp("01 JAN 2010"), "From Date", group = G2)
eTime  =  input.time(timestamp("01 DEC 2050"), "To Date",   group = G2)

// Capital & Currency
depAmt = input.float(1000, "Deposite Amount    ", 0,                                   inline = "4", group = G2, display = display.none)
curncy = input.string("USD", "",                                                       inline = "4", group = G2, display = display.none)
depPer = input.string("Month", "Depositing Every     ", 
                                      ["Week", "2-Weeks", "Month", "Quarter", "Year"], inline = "3", group = G2, display = display.none)
depMod = input.string("Fixed", "Depositing Model    ", 
   ["Fixed", "Increased % (Weekly)", "Increased % (Monthly)", "Increased % (Yearly)"], inline = "5", group = G2, display = display.none)
depGwM = input.string("Linear", "   ➤ Increased %   ", ["Linear", "Exponential"],     inline = "6", group = G2, display = display.none)
depGwV = input.float(3.8, "", 0,                                                       inline = "6", group = G2, display = display.none)/100

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                  SYMBOLS                                   |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
var G3 = "Portfolio Holdings                                 (Total weight must equal or be less than 100%)"
// Symbols Checkmark
u01 = input.bool(true, "", group = G3, inline = "s01")
u02 = input.bool(true, "", group = G3, inline = "s02")
u03 = input.bool(true, "", group = G3, inline = "s03")
u04 = input.bool(true, "", group = G3, inline = "s04")
u05 = input.bool(true, "", group = G3, inline = "s05")
u06 = input.bool(true, "", group = G3, inline = "s06")

// Symbols Weight
w01 = input.float(30, "", 0, group = G3, inline = "s01", display = display.none)/100
w02 = input.float(30, "", 0, group = G3, inline = "s02", display = display.none)/100
w03 = input.float(10, "", 0, group = G3, inline = "s03", display = display.none)/100
w04 = input.float(10, "", 0, group = G3, inline = "s04", display = display.none)/100
w05 = input.float(10, "", 0, group = G3, inline = "s05", display = display.none)/100
w06 = input.float(10, "", 0, group = G3, inline = "s06", display = display.none)/100

// Symbol Input
s01 = input.symbol("SPY" , "(%)   ", group = G3, inline = "s01", display = display.none)
s02 = input.symbol("QQQ" , "(%)   ", group = G3, inline = "s02", display = display.none)
s03 = input.symbol("MSFT", "(%)   ", group = G3, inline = "s03", display = display.none)
s04 = input.symbol("AAPL", "(%)   ", group = G3, inline = "s04", display = display.none)
s05 = input.symbol("AMZN", "(%)   ", group = G3, inline = "s05", display = display.none)
s06 = input.symbol("EBAY", "(%)   ", group = G3, inline = "s06", display = display.none)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                CALCULATION                                 |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// +++++++++++++ Collect Holdings
var u = array.from(u01, u02, u03, u04, u05, u06) // Enable / Disable
var w = array.from(w01, w02, w03, w04, w05, w06) // Weight
var s = array.from(s01, s02, s03, s04, s05, s06) // Symbols

// +++++++++++++ Round Functions
round(x, mintick) =>
    i = 1, j = 0
    while mintick * i < 1
        i *= 10
        j += 1

    mult = math.pow(10, j)
    math.floor(x * mult) / mult

// +++++++++++++ Period Function 
newPeriod(prd) =>
    switch prd
        "Week"     => "W"
        "2-Weeks"  => "2W"
    	"Month"    => "M"
    	"Quarter"  => "3M"
    	"Year"     => "12M"

// +++++++++++++ Essential Parameters
var start = int(na), var end = eTime
var weights = array.new<float> (na)
var symbols = array.new<string>(na)
var cashWgt = array.new<float> (na)

if barstate.isfirst
    // Symbols & Weights Recognition
    for i = 0 to u.size() - 1
        if u.get(i)
            weights.push(w.get(i))
            symbols.push(s.get(i))
            cashWgt.push(0)

    totWeight = weights.sum() * 100
    if totWeight > 100
        runtime.error("The current sum of weights is " + str.tostring(totWeight) + 
                 "%. Instruments' weight summation must equal or be less than 100%.")

    //  Start-End Time Performance
    if sTime < eTime and time < eTime
        start := time > sTime ? time : sTime
    else 
        end   := int(na)

// +++++++++++++ Initiate Matrices & Array
datMtx     = matrix.new<string>(0, 7, na)  // Info/String Data 
var stkMtx = matrix.new<float> (0, 8, na)  // Portfolio
var prcMtx = matrix.new<float> (0, 5, na)  // Price

// +++++++++++++ Get Ticker Prices & Info Function
tickerInfo() =>
    var dec = string(na), var cnt = string(na), var sec = string(na), var ind = string(na),

    // Get Symbol's Infos
    if barstate.islastconfirmedhistory
        dec := syminfo.description
        cnt := syminfo.country
        sec := syminfo.sector
        ind := syminfo.industry

    [open, close, high, low, time, dec, cnt, sec, ind, syminfo.mintick]

// +++++++++++++ Main Function
main(num, flg, sym, totDeposit, totAssets) =>
    if flg and start <= time and time <= end

        // Check if symbol is in symbol array 
        nIdx = symbols.indexof(sym)
        if nIdx > -1 

            // Import Ticker Price & Info
            symbol = ticker.modify(sym, syminfo.session)
            [o, c, h, l, t, dec, cnt, sec, ind, mintick] = request.security(symbol, "", tickerInfo(), 
                                             ignore_invalid_symbol = true, currency = curncy)
            
            op = o, cl = c, hi = h, lw = l
            if not na(cl)
                // Create new row for Stock & Price Matrices
                var first = true
                if first
                    stkMtx.add_row(stkMtx.rows(), array.from(num, 0, 0, 0, 0, 0, 0, 0))
                    prcMtx.add_row(prcMtx.rows(), array.from(0, 0, 0, 0, 0))
                    first := false 

                // Optimize Price: If ticker exchange is off-market while chart is a Head time 
                if t < time
                    op := c, cl := c, hi := c, lw := c 

                // +++++ Update row with new values
                // Chek if Symbol Row is exist in Stock Matrix
                rIdx = stkMtx.col(0).indexof(num)
                if rIdx > -1
                    var avgEntr = float(na) 
                    // ++++++++++ New Deposit 
                    dep = cashWgt.get(nIdx)
                    if dep > 0
                        totCost  = dep + stkMtx.get(rIdx, 4)          // Total Cost
                        totShar  = (dep/op) + stkMtx.get(rIdx, 3)     // Total Share
                        avgEntr := totCost/totShar                    // Average Entry 

                        stkMtx.set(rIdx, 2, round(avgEntr, mintick))  // Average Entry 
                        stkMtx.set(rIdx, 3, totShar)                  // Total Shares
                        stkMtx.set(rIdx, 4, totCost)                  // Total Cost

                        cashWgt.set(nIdx, 0)

                    // ++++++++++ Update  Values
                    // Info
                    if barstate.islast
                        datMtx.add_row(datMtx.rows(), array.from(str.tostring(num), str.split(sym, ":").get(1), 
                             str.split(sym, ":").get(0), na(dec) ? sym : dec, na(cnt) ? "N/A" : cnt, 
                             na(sec) ? "N/A" : sec, na(ind) ? "N/A" : ind))

                    // Return 
                    var rtrn = float(na)
                    share = stkMtx.get(rIdx, 3)
                    rtrn := share * (cl - avgEntr)

                    // Price Matrix
                    prcMtx.set(rIdx, 0, (share * op)) // Open
                    prcMtx.set(rIdx, 1, (share * hi)) // High
                    prcMtx.set(rIdx, 2, (share * lw)) // Low
                    prcMtx.set(rIdx, 3, (share * cl)) // Close
                    prcMtx.set(rIdx, 4, t)            // Time

                    // Stock Matrix
                    stkMtx.set(rIdx, 5, share * cl)                         // Curent Cost
                    stkMtx.set(rIdx, 6, rtrn/totDeposit * 100)              // Return P&L (%)
                    stkMtx.set(rIdx, 7, ((share * cl[1])/totAssets) * 100)  // Weighted of Portfolio
                    stkMtx.set(rIdx, 1, round(cl, mintick))                 // Last

// +++++++++++++ Depositing
var depositLabel = array.new<label>(na) // Deposit Label Array
var depositLine  = array.new<line>(na)  // Deposit Line Array

var totAssets  = 0.0  // Total Assets 
var totDeposit = 0.0  // Total Deposite
var numDeposit = 0    // Number of Deposit
var remainWhgt = 0.0  // Remain Weight
var freeCash   = 0.0  // Unused Cash
if not na(cashWgt) and start <= time and time <= end
    // Dposit
    var deposit = depAmt
    if depMod != "Fixed" and numDeposit > 0
        if   str.contains(depMod,  "Weekly") ? timeframe.change("W") : 
             str.contains(depMod, "Monthly") ? timeframe.change("M") :  timeframe.change("12M")
            deposit := if depGwM == "Exponential"
                deposit * math.pow(math.e, depGwV)
            else 
                deposit + deposit * depGwV

    // Dividing Dposit
    if timeframe.change(newPeriod(depPer))
        numDeposit += 1
        totDeposit += deposit
        remainWhgt += (1 - weights.sum()) * deposit 
        for i = 0 to cashWgt.size() - 1
            cashWgt.set(i, cashWgt.get(i) + weights.get(i) * deposit)

        // Deposit indication on chart
        if pltChk and depChk
            depositLine.push(line.new(bar_index, na, bar_index, na, xloc.bar_index, extend.both, 
                             color.new(chart.fg_color, 50), line.style_dashed))
                    
            depositLabel.push(label.new(bar_index, na, "💰💰💰💰💰\nDEPOSIT#" + str.tostring(numDeposit) + "\n" + 
                              str.tostring(deposit, "$0.00"), xloc.bar_index, yloc.price, chart.fg_color, 
                              label.style_label_center, chart.bg_color, size.small))

// +++++++++++++ Call Symbols
main(1, u01, s01, totDeposit, totAssets), main(2, u02, s02, totDeposit, totAssets)
main(3, u03, s03, totDeposit, totAssets), main(4, u04, s04, totDeposit, totAssets)
main(5, u05, s05, totDeposit, totAssets), main(6, u06, s06, totDeposit, totAssets)

// +++++++++++++ Update Varibles & Re-sort Matrices 
if stkMtx.rows() > 0 
    // Total Assets
    freeCash  := remainWhgt + cashWgt.sum()
    totAssets := stkMtx.col(5).sum() + freeCash

    // Sorting
    if sortBy != "None"
        order = sortOd == "Ascending" ? order.ascending : order.descending
        if sortBy == "Symbols"
            datMtx.sort(1, order)
        else
            a = sortBy == "Return(%) Portfolio" ? 6 : 7
            stkMtx.sort(a, order)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                              CHART & PLOTTING                              |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// +++++++++++++ Bar Data
o = float(na), c = float(na), h = float(na), l = float(na)
if prcMtx.rows() > 0 
    if prcMtx.col(4).max() >= time
        if pltIdx == "Return(%)"
            o := (prcMtx.col(0).sum() + freeCash - totDeposit)/totDeposit * 100
            c := (prcMtx.col(3).sum() + freeCash - totDeposit)/totDeposit * 100
            h := (prcMtx.col(1).sum() + freeCash - totDeposit)/totDeposit * 100
            l := (prcMtx.col(2).sum() + freeCash - totDeposit)/totDeposit * 100

        else if pltIdx == "Return"
            o := (prcMtx.col(0).sum() + freeCash - totDeposit)
            c := (prcMtx.col(3).sum() + freeCash - totDeposit)
            h := (prcMtx.col(1).sum() + freeCash - totDeposit)
            l := (prcMtx.col(2).sum() + freeCash - totDeposit)

        else 
            o := prcMtx.col(0).sum() + freeCash
            c := prcMtx.col(3).sum() + freeCash
            h := prcMtx.col(1).sum() + freeCash
            l := prcMtx.col(2).sum() + freeCash
            
// +++++++++++++ Index Change
indexChange(c) =>
    var c0     = 0.0   // Close at Regular Session.
    var c1     = 0.0   // Close at Day Session.
    var isChgD = false // Change in Day

    c0   := not na(c) ? c : c0
    isChgD := dayofmonth != dayofmonth[1] ? true : isChgD
    if isChgD and not na(c) 
        c1 := c0[1], isChgD := false

    [c0, (c0 - c1), (c0 - c1)/c1 * 100]
 
[indxCls, indxChg, indxChgP] = indexChange(c)

// +++++++++++++ Plot Color
var cndColor1 = upColr, cndColor1 := na(c) ? cndColor1 : (c > o    ? upColr : c < o    ? dnColr : upColr)
var cndColor2 = upColr, cndColor2 := na(c) ? cndColor2 : (c > c[1] ? upColr : c < c[1] ? dnColr : upColr)

// +++++++++++++ Plotting
// Candle Plot
plotcandle(o, h, l, c, "Candle", cndColor1, color.gray, true, bordercolor = cndColor1, 
           display = pltChk and pltTyp == "Candle" ? display.all : display.none)

// Bar Plot
plotbar (o, h, l, c, "Bar", cndColor1, true,   display = pltChk and pltTyp == "Bar"  ? display.all : display.none)

// Line Plot
plot(c, "Line", cndColor2, 2, editable = true, display = pltChk and pltTyp == "Line" ? display.all : display.none)

// Change Percentage 
plot(timeframe.isintraday ? (c-c[1])/c[1] * 100 : not na(c) ? indxChgP : na, "", cndColor1, editable = false, 
     display = pltChk and pltIdx != "Return(%)" ? display.status_line : display.none, format = format.percent)

// Last Price Line
if pltChk 
    if barstate.islast and chart.right_visible_bar_time >= time
        line.new(bar_index[1], indxCls, bar_index, indxCls, xloc.bar_index, extend.both, 
         pltTyp == "Line" ? cndColor2 : cndColor1, line.style_dotted, 1)

// +++++++++++++ Update the location of deposit labels on chart
visibleBarIndex(x) =>
    barIdx = int(na)
    if barstate.islast 
        for i = 0 to 5000
            if time[i] <= x 
                barIdx := bar_index[i]
                break
    barIdx

lwVisibleChart(l) =>
    lVisBarIndx =  bar_index - visibleBarIndex(chart.left_visible_bar_time)
    rVisBarIndx =  bar_index - visibleBarIndex(chart.right_visible_bar_time)

    var lowestEver = float(na), 
    lowestEver := na(lowestEver) ? l : math.min(l, lowestEver)

    lwVisibleChart = float(na)
    if na(l[lVisBarIndx]) or na(l[rVisBarIndx])
        lwVisibleChart := lowestEver
    else
        for i = rVisBarIndx to lVisBarIndx 
            if l[i] < lwVisibleChart or na(lwVisibleChart)
                lwVisibleChart := l[i]
        
    lwVisibleChart

if pltChk and depChk
    lwVisibleChart = lwVisibleChart(l)
    if depositLabel.size() > 0
        for i = 0 to depositLabel.size() - 1
            depositLabel.get(i).set_y(lwVisibleChart * (1 - math.sign(lwVisibleChart) * 0.05))

    if depositLine.size() > 0
        line.set_y1(depositLine.get(-1), l)
        line.set_y2(depositLine.get(-1), h)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                   TABLE                                    |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// +++++++++++++ Get Tbale Location & Size
locNsze(x) => 
    y   = str.split(str.lower(x), " ")
    out = ""
    for i = 0 to y.size() - 1
        out := out + y.get(i)
        if i != y.size() - 1
            out := out + "_"
    out

// +++++++++++++ Create Table
nCols = 6, nRows = 19
var table tbl = table.new(locNsze(tblPos), nCols, nRows, color(na), color(na), 1, color(na), 1)

// +++++++++++++ Cell Function
cell(col, row, bCol, tCol, txt, bold) => 
    tbl.cell(col, row, txt, 0, 0, tCol, bgcolor = bCol, text_size = tblSiz)
    if bold == 1
        tbl.cell_set_text_formatting(col, row, text.format_bold)

dCell(col, row, txt1, txt2, z, merge) => 
    zCol = z == 0 ? cBgCol : z > 0 ? upColr : dnColr
    cell(col, row  , tBgCol, txtCol, txt1, 1)
    cell(col, row+1,   zCol, txtCol, txt2, 0) 
    if merge 
        tbl.merge_cells(col, row  , col+1, row  ) 
        tbl.merge_cells(col, row+1, col+1, row+1)

// +++++++++++++ Draw Table
if barstate.islast and not na(tbl)
    tbl.clear(0, 0, nCols - 1, nRows - 1)
    v = 0

    // +++++++++++++ Caution
    if sTime < start
        cell(0, v, color(na), color.orange, "⚠️ SWITCH CHART TO HIGH TIMEFRAME​", 1) 
        tbl.cell_set_tooltip(0, v, "Note: The datetime of the first candle on the chart is after the entered datetime;"
         + " therefore, the calculation will start from that first candle, not the entered datetime.")
        tbl.merge_cells(0, v, nCols - 1, v), v += 1       

    // +++++++++++++ Index Title
    if indChk
        // Index
        r = indxChg > 0 ? upColr : indxChg < 0 ? dnColr : txtCol

        cell(0, v, color(na), r, indNme + "\n" +
             str.tostring(math.abs(indxCls) > 0.01 ? math.round(indxCls, 2) : indxCls, "0.00######") + "    " + 
             str.tostring(math.abs(indxCls) > 0.01 ? math.round(indxChg, 2) : indxCls, "0.00######") + "    " +
             str.tostring(indxChgP, format.percent), 0), 
        tbl.cell_set_text_size(0, v, size.auto)
        tbl.cell_set_text_font_family(0, v, font.family_default)
        tbl.merge_cells(0, v, nCols - 1, v), 
        v += 1

    // +++++++++++++ Spacification
    if spcChk
        cell(0, v, tBgCol, txtCol, "S P E C I F I C A T I O N S", 1), 
        tbl.merge_cells(0, v, nCols - 1, v), v += 1

        // Date
        dCell(0, v, "From" + (sTime < start ? "⚠️" : ""), str.format_time(start, "yyyy-MM-dd"), 0, true),
                 
        dCell(2, v, "To",    str.format_time(end > time ? time : end, "yyyy-MM-dd"), 0, true) 

        // Return %
        // +++++++++++++ Return 
        rtrn    = (prcMtx.col(3).sum() + freeCash - totDeposit)
        rtrnPer = rtrn/totDeposit * 100
        dCell(4, v, "Return (%)", str.tostring(rtrnPer, format.percent), rtrnPer, true)
        tbl.cell_set_tooltip(4, v+1, str.format("{0,number,currency}", rtrn))
        v += 2

        // Total Deposit
        dCell(0, v, "Total Deposit", str.format("{0,number,currency}", totDeposit), 0, true)

        // Free Cash
        dCell(2, v, "Free Cash", str.format("{0,number,currency}", freeCash), 0, true)

        // Assets
        dCell(4, v, "Assets", str.format("{0,number,currency}", totAssets), 0, true),
        v += 2

        tbl.cell(0, v, "", 0, 1), v += 1

    // +++++++++++++ Holdings
    if tblChk 
        cell(0, v, tBgCol, txtCol, "H O L D I N G S", 1), 
        table.merge_cells(tbl, 0, v, nCols - 1, v), v += 1

        cell(0, v, tBgCol, txtCol, "Symbol", 1)
        cell(1, v, tBgCol, txtCol, "Last", 1)
        cell(2, v, tBgCol, txtCol, "Average\nEntry", 1)
        cell(3, v, tBgCol, txtCol, "Shares", 1)
        cell(4, v, tBgCol, txtCol, "Return(%)\nPortfolio", 1)
        cell(5, v, tBgCol, txtCol, "Weight(%)\nPortfolio", 1)
        v += 1
        
        if stkMtx.rows() > 0
            for i = 0 to stkMtx.rows() - 1
                // Symbol 
                idx   = datMtx.col(0).indexof(str.tostring(stkMtx.get(i, 0)))
                symbl = datMtx.get(idx, 1)
                r     = sortBy == "Symbols" ? v + idx : v + i

                cell(0, r, tBgCol, txtCol, symbl, 1)
                tbl.cell_set_tooltip(0, r, datMtx.get(idx, 3)  +
                 "\n=========================================" +
                 "\nExᴄʜᴀɴɢᴇ﹕"    + datMtx.get(idx, 2)        +
                 "\nCᴏᴜɴᴛʀʏ﹕"     + datMtx.get(idx, 4)        +
                 "\nSᴇᴄᴛᴏʀ﹕"      + datMtx.get(idx, 5)        +
                 "\nIɴᴅᴜsᴛʀɪᴀʟ﹕"  + datMtx.get(idx, 6))

                // Last 
                cell(1, r, cBgCol, txtCol, str.tostring(stkMtx.get(i, 1), "0.00########"), 0)

                // Entry
                cell(2, r, cBgCol, txtCol, str.tostring(stkMtx.get(i, 2), "0.00########"), 0)

                // Shares
                cell(3, r, cBgCol, txtCol, str.tostring(stkMtx.get(i, 3), "0.0000"), 0)

                // Return (%)
                symRtn = stkMtx.get(i, 6)
                symCol = symRtn > 0 ? upColr : symRtn < 0 ? dnColr : cBgCol
                cell(4, r, symCol, txtCol, str.tostring(symRtn, format.percent), 0)

                // Weight % of Portfolio
                cell(5, r, cBgCol, txtCol, str.tostring(stkMtx.get(i, 7), format.percent), 0)

            v += int(stkMtx.rows())
        
            tbl.cell(0, v, "", 0, 1), v += 1
