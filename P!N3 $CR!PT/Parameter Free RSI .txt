// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © InvestorUnknown

//                                                                                  {||}                   
//                                                       ,                          {||}          
//                                                  ,,,,,                           {||}
//                                                ,,,,,       ,       ,,            {||}       
//                                    ,         ,,,, ,       ,,     ,,,             {||}       
//             .                   , ,         ,,,,  ,     ,,,,   .,,               {||}            ╔╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╗
//             ,,                 ,       ,,   ,,,,,,,  ,  ,      ,                 {||}            ╠╬╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╬╣  
//             ,,                 ,,   ,  ,,  ,,,,,, ,,,,    , ,                    {||}            ╠╣  /$$$$$$                                           /$$                         ╠╣
//              .,         ,      ,,,  ,,,,,,,,,,,,,, ,,  ,,  , ,         ,,        {||}            ╠╣ |_  $$_/                                          | $$                         ╠╣
//                           ,  .  ,, ,,,,,,,,,,,,, ,    ,,, , ,,    ,   ,          {||}            ╠╣   | $$   /$$$$$$$  /$$    /$$ /$$$$$$   /$$$$$$$ /$$$$$$    /$$$$$$   /$$$$$$  ╠╣
//                   ,,           ,,, ,,,,,,,,,,,,,,,,,,,,,,  ,,,   ,,              {||}            ╠╣   | $$  | $$__  $$|  $$  /$$//$$__  $$ /$$_____/|_  $$_/   /$$__  $$ /$$__  $$ ╠╣
//               , ,   ,,,     .,,,,,,,,,,,, ,,,  ,,,,,,,,   ,,,    ,,              {||}            ╠╣   | $$  | $$  \ $$ \  $$/$$/| $$$$$$$$|  $$$$$$   | $$    | $$  \ $$| $$  \__/ ╠╣      
//         .,     , ,,  ,,    ,,, ,,,,,,, ,,  ,,, ,,,,, ,,, ,  ,,   ,,              {||}            ╠╣   | $$  | $$  | $$  \  $$$/ | $$_____/ \____  $$  | $$ /$$| $$  | $$| $$       ╠╣     
//            ,   ,,,,,  ,    ,,,, ,, , ,,,,,,,,,,,,,,,,,,,,,, ,,  ,,               {||}            ╠╣  /$$$$$$| $$  | $$   \  $/  |  $$$$$$$ /$$$$$$$/  |  $$$$/|  $$$$$$/| $$       ╠╣   
//               .    //./ /// ,,,,,,,,,,,,,,,. ,,,,,,,,,,,,,,,,,,                  {||}            ╠╣ |______/|__/  |__/    \_/    \_______/|_______/    \___/   \______/ |__/       ╠╣
//                ,  /         ,., ,,,,,,,,,,, ,,,,,,,   ,,,,,,,                    {||}            ╠╣                                                                                ╠╣
//            .  ,,,  ,/ ///./   ,,,.,,,,,,,,,,,,,,,      ,, , ,                    {||}            ╠╣                                                                                ╠╣
//             ,,,,,,  //./ , /    .,,.,,, ,,,,,, ,.     ,,,,,,,                    {||}            ╠╣                                                                                ╠╣
//              ,,,,   //  *, / / ,,,,,,,,,,,,          ,, ,,,,,                    {||}            ╠╣    /$$   /$$           /$$                                                     ╠╣
//               ,,  // ////.*/// / ,.,,,,,.,, ,,  ,,,, ,,,,,,                      {||}            ╠╣   | $$  | $$          | $$                                                     ╠╣
//                   ,  /////    //  , ,,,,,, ,,,, ,,,,,  ,,, / /.                  {||}            ╠╣   | $$  | $$ /$$$$$$$ | $$   /$$ /$$$$$$$   /$$$$$$  /$$  /$$  /$$ /$$$$$$$    ╠╣
//              ,,   ,         ////// ,,,,,,,,,  ,,,,,,,,/ ///  / //                {||}            ╠╣   | $$  | $$| $$__  $$| $$  /$$/| $$__  $$ /$$__  $$| $$ | $$ | $$| $$__  $$   ╠╣
//                         ///// .// ,,,,,,  ,, ,,,, ,,, ///*  //*///               {||}            ╠╣   | $$  | $$| $$  \ $$| $$$$$$/ | $$  \ $$| $$  \ $$| $$ | $$ | $$| $$  \ $$   ╠╣
//                           //  .           ,, .// ,,      ///, ///                {||}            ╠╣   | $$  | $$| $$  | $$| $$_  $$ | $$  | $$| $$  | $$| $$ | $$ | $$| $$  | $$   ╠╣
//                        //////        ,,,,    ///// ,.        ,                   {||}            ╠╣   |  $$$$$$/| $$  | $$| $$ \  $$| $$  | $$|  $$$$$$/|  $$$$$/$$$$/| $$  | $$   ╠╣
//                   *///////. //              /  */////*                           {||}            ╠╣    \______/ |__/  |__/|__/  \__/|__/  |__/ \______/  \_____/\___/ |__/  |__/   ╠╣ 
//                         .,,  // ,,,,,,,,,, //* ,,,  //////                       {||}            ╠╬╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╦╬╣
//                           ,,,,,   ,,,,,, ,.,,,,,,,                               {||}            ╚╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╩╝
//                               ,,,,,,,,,,,, ,,                                    {||}          
//                                  ,,,,,,,,,                                       {||}                                                                                                                                  
//                                                                                  {||} 
//                                                                                  {||} 

//@version=6
indicator("Parameter Free RSI [InvestorUnknown]", "PF-RSI", overlay = false)

// - - - - - STRINGS - - - - - //{

// Input Categories
var string c1               = "RSI Length"
var string c2               = "RSI Moving Average"
var string c3               = "Plotting"
var string c4               = "Alerts"

// Tooltips
var string rsi_len_variant_tooltip = 
 "Length Calculation Variant:\n" +
 "I - Aggressive: Strongly increases length based on volatility and distance from RSI midpoint.\n" +
 "II - Moderate: Adds volatility and scaled distance from midpoint.\n" +
 "III - Conservative: Adds volatility and raw distance from midpoint."

var string ma_len_tooltip = 
 "Smoothing Length Options:\n" +
 "Full - Uses the full calculated dynamic length.\n" +
 "Half - Uses half of the calculated dynamic length.\n" +
 "SQRT - Uses the square root of the calculated dynamic length."
//}

// - - - - - INPUTS - - - - - //{

// Main RSI Inputs
var bool   smooth               = input.bool(true, "Smooth", group = c1, display = display.none)
var string rsi_len_variant      = input.string("I", "Length Calculation Variant", options = ["I", "II", "III"], group = c1, tooltip = rsi_len_variant_tooltip, display = display.none)

// RSI Moving Average Inputs
var string ma_type              = input.string("SMA", "Smoothing Type", options = ["SMA", "EMA"], group = c2, display = display.none)
var string ma_len               = input.string("Half", "Smoothing Length", options = ["Full", "Half", "SQRT"], group = c2, tooltip = ma_len_tooltip, display = display.none)

// Plotting Inputs
var string barc_style           = input.string("Trend (Raw RSI)", "Barcolor Style", 
 options = ["Trend (Raw RSI)", "Trend (RSI MA)", "Trend (Raw RSI) + Momentum", "Trend (RSI MA) + Momentum", "Momentum", "Off"], group = c3, display = display.none)
var bool   intrabar             = input.bool(true, "Allow intrabar updating", group = c3, display = display.none)

// Alert Inputs
var string alert_trend          = input.string("Off", "Trend Alert", 
 options = ["Raw RSI", "RSI MA", "Off"], group = c4, display = display.none)
var bool alert_momentum         = input.bool(false, "Momentum Alert", group = c4, display = display.none)
//}

// - - - - - FUNCTIONS - - - - - //{

// Default Pine Script SMA function used directly to avoid errors with ta.sma
// ta.sma requires a constant length, which causes issues with dynamic lengths
// Using the underlying pine_sma function works correctly with variable lengths
pine_sma(x, y) =>
    sum = 0.0
    for i = 0 to y - 1
        sum := sum + x[i] / y
    sum

// Default Pine Script RMA function used directly to avoid errors with ta.rma
// ta.rma requires a constant length, which causes issues with dynamic lengths
// Using the underlying pine_sma function works correctly with variable lengths
pine_rma(src, length) =>
    alpha = 1/length
    sum = 0.0
    sum := na(sum[1]) ? pine_sma(src, length) : alpha * src + (1 - alpha) * nz(sum[1])

// Default Pine Script RSI function used directly to avoid errors with ta.rsi
// ta.rsi requires a constant length, which causes issues with dynamic lengths
// Using the underlying pine_sma function works correctly with variable lengths
pine_rsi(x, y) => 
    u = math.max(x - x[1], 0) // upward ta.change
    d = math.max(x[1] - x, 0) // downward ta.change
    rs = pine_rma(u, y) / pine_rma(d, y)
    res = 100 - 100 / (1 + rs)
    res

// Default Pine Script EMA function used directly to avoid errors with ta.ema
// ta.ema requires a constant length, which causes issues with dynamic lengths
// Using the underlying pine_sma function works correctly with variable lengths
pine_ema(src, length) =>
    alpha = 2 / (length + 1)
    sum = 0.0
    sum := na(sum[1]) ? src : alpha * src + (1 - alpha) * nz(sum[1])

// Function that returns a dynamic RSI length based on past RSI values
// The idea is to make the RSI length adaptive using volatility (stdev) and distance from the RSI midpoint (50)
// Different "variant" options control how aggressively the length changes
parameter_free_length(free_rsi, variant) =>
    len = switch variant
        // Variant I: Most aggressive adaptation
        // Uses standard deviation scaled by a nonlinear factor of distance from 50
        // Also adds another distance-based term to increase length more dramatically
        "I" => math.ceil(
                     ta.stdev(free_rsi - 50, math.ceil(free_rsi)) *
                     math.pow(1 + (math.ceil((50 - math.abs(free_rsi[1] - 50))) / 100), 2)
                 ) +
                 (
                     math.ceil(math.abs(free_rsi[1] - 50)) *
                     (1 + (math.ceil((50 - math.abs(free_rsi[1] - 50))) / 100))
                 )
        
        // Variant II: Moderate adaptation
        // Adds the standard deviation and a distance-based scaling term (less nonlinear)
        "II" => math.ceil(
                         ta.stdev(free_rsi - 50, math.ceil(free_rsi)) +
                     (
                         math.ceil(math.abs(free_rsi[1] - 50)) *
                         (1 + (math.ceil((50 - math.abs(free_rsi[1] - 50))) / 100))
                     )
                 )
        
        // Variant III: Least aggressive adaptation
        // Simply adds standard deviation and raw distance from 50 (linear scaling)
        "III" => math.ceil(
                     ta.stdev(free_rsi - 50, math.ceil(free_rsi)) +
                     math.ceil(math.abs(free_rsi[1] - 50))
                 )

//}

// - - - - - CALCULATIONS - - - - - //{

var float free_rsi  = 0.0

// Step 1: Initialize RSI only once at the beginning
// If `free_rsi` has not been assigned yet (i.e., first run), use the standard RSI with a fixed length of 14
// This will be used to seed the dynamic calculation
rsi_base            = free_rsi[1] > 0.0 ? na : ta.rsi(close, 14)

// Step 2: Calculate the approximate intrabar range as a percentage of the close
// This will help define an initial dynamic length if needed
range_pct           = math.ceil(((high - low) / close) * 100)

// Step 3: Compute the parameter-free dynamic RSI length
free_rsi_len        = free_rsi[1] > 0.0 ? 
 // Case A: `free_rsi` already exists, so we can compute a new length using the chosen variant
 parameter_free_length(free_rsi, rsi_len_variant) 
 : rsi_base[1] > 0.0 ? 
 // Case B: On the first bar, use the seeded RSI (`rsi_base`) to estimate an initial dynamic length
 (range_pct[1] * math.pow(1 + (math.ceil((50 - math.abs(rsi_base[1] - 50))) / 100), 2)) +
 (math.ceil(math.abs(rsi_base[1] - 50)) * (1 + (math.ceil((50 - math.abs(rsi_base[1] - 50))) / 100))) 
 : na

// Step 4: Update `free_rsi` only when the dynamic length becomes valid
if free_rsi_len > 0.0
    free_rsi := pine_rsi(close, 
         smooth ? pine_sma(math.round(free_rsi_len, 0), math.round(free_rsi_len, 0)) // Optionally smooth the dynamic length using SMA
         : math.round(free_rsi_len, 0) // Use raw dynamic length if no smoothing is selected
     )

// Smoothing MA
smooth_len          = switch ma_len
    "Full" => math.round(free_rsi_len, 0)
    "Half" => math.round(free_rsi_len, 0) / 2
    "SQRT" => math.ceil(math.sqrt(math.round(free_rsi_len, 0)))

smoothing           = switch ma_type
    "SMA" => pine_sma(free_rsi, smooth_len)
    "EMA" => pine_ema(free_rsi, smooth_len)
//}

// - - - - - VISUALIZATION - - - - - //{

color bcol          =color.rgb(54, 208, 19)
color scol          =color.rgb(227, 34, 34)

barcol = switch barc_style
    "Trend (Raw RSI)"               => free_rsi > 50 ? bcol : scol
    "Trend (RSI MA)"                => smoothing > 50 ? bcol : scol
    "Trend (Raw RSI) + Momentum"    => free_rsi > 50 ? (free_rsi > smoothing ? bcol : color.new(color.green, 50)) : (free_rsi < smoothing ? scol : color.new(color.red, 50))
    "Trend (RSI MA) + Momentum"     => smoothing > 50 ? (free_rsi > smoothing ? bcol : color.new(color.green, 50)) : (free_rsi < smoothing ? scol : color.new(color.red, 50))
    "Momentum"                      => free_rsi > smoothing ? bcol : scol
    "Off"                           => na

// Plot index
var int i           = intrabar ? 0 : 1

// Plotting
M = plot(50, color = color.gray, linewidth = 2)
R = plot(free_rsi[i], "Free RSI", color = color.white, linewidth = 1)
plot(smooth[i] ? pine_sma(math.round(free_rsi_len[i], 0), math.round(free_rsi_len[i], 0)) : math.round(free_rsi_len[i], 0), "Free RSI Length", color = color.new(color.white, 70))
S = plot(smoothing[i], "Free RSI MA", color = color.yellow, linewidth = 2)
plot(free_rsi[i], "RSI", free_rsi[i] > 50 ? color.from_gradient(free_rsi[i] - 50, 0, 50, na, color.green) : color.from_gradient(free_rsi[i] - 50, -50, 0, color.red, na), style = plot.style_histogram, histbase =  50)

fill(S, R, free_rsi[i] > smoothing[i] ? color.from_gradient(free_rsi[i] - smoothing[i], 0, 10, na, color.green) : color.from_gradient(free_rsi[i] - smoothing[i], -10, 0, color.red, na))
barcolor(barcol[i])
//}

// - - - - - ALERTS - - - - - //{

// Trend
string trend_up_msg = "[PF-RSI] Uptrend on: " + str.tostring(syminfo.ticker)
string trend_dn_msg = "[PF-RSI] Downtrend on: " + str.tostring(syminfo.ticker)

if alert_trend == "Raw RSI"
    if ta.crossover(free_rsi, 50)
        alert(trend_up_msg, alert.freq_once_per_bar_close)
    else if ta.crossunder(free_rsi, 50)
        alert(trend_dn_msg, alert.freq_once_per_bar_close)
else if alert_trend == "RSI MA"
    if ta.crossover(smoothing, 50)
        alert(trend_up_msg, alert.freq_once_per_bar_close)
    else if ta.crossunder(smoothing, 50)
        alert(trend_dn_msg, alert.freq_once_per_bar_close)

// Momentum
string mom_up_msg = "[PF-RSI] Rising Momentum on: " + str.tostring(syminfo.ticker)
string mom_dn_msg = "[PF-RSI] Decling Momentum on: " + str.tostring(syminfo.ticker)

if alert_momentum
    if ta.crossover(free_rsi, smoothing)
        alert(mom_up_msg, alert.freq_once_per_bar_close)
    else if ta.crossunder(free_rsi, smoothing)
        alert(mom_dn_msg, alert.freq_once_per_bar_close)
//}