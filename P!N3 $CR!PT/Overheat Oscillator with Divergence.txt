// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Uncle_the_shooter

//@version=6
indicator('Overheat Oscillator with Divergence', overlay = false)

// === SETTINGS ===
length = input.int(20, 'Period Length', minval = 1, group = 'SETTINGS')
length_sma = input.int(20, 'Volume SMA Period', minval = 1, group = 'SETTINGS')
volume_multiplier = input.float(2.0, 'Volume Multiplier', minval = 1.0, step = 0.1, group = 'SETTINGS')
sma_length = input.int(5, 'SMA Length', minval = 1, group = 'SETTINGS')
overheat_level = input.float(70, 'Overheat Threshold', minval = 50, maxval = 100, group = 'THRESHOLDS')
oversold_level = input.float(30, 'Oversold Threshold', minval = 0, maxval = 50, group = 'THRESHOLDS')
gradientMin = input.float(20, 'Gradient Min (Green)', minval = 0, maxval = 100, group = 'THRESHOLDS')
gradientYellow = input.float(35, 'Gradient Yellow Threshold', minval = 0, maxval = 100, group = 'THRESHOLDS')
gradientOrange = input.float(60, 'Gradient Orange Threshold', minval = 0, maxval = 100, group = 'THRESHOLDS')
gradientMax = input.float(70, 'Gradient Max (Red)', minval = 0, maxval = 100, group = 'THRESHOLDS')
signalColor = input.color(color.rgb(5, 0, 0), 'Signal Line Color', group = 'VISUALIZATION')
showLevels = input.bool(true, 'Show Reference Lines', group = 'VISUALIZATION')

// === DIVERGENCE SETTINGS ===
calculateDivergence = input.bool(false, title="Calculate Divergence", group="DIVERGENCE SETTINGS", display = display.data_window, tooltip = "Enable to detect bullish and bearish divergences.")
lookbackRight = input.int(5, title="Lookback Right", minval=1, group="DIVERGENCE SETTINGS")
lookbackLeft = input.int(5, title="Lookback Left", minval=1, group="DIVERGENCE SETTINGS")

// === CUSTOM HORIZONTAL LINES (STYLE) ===
customLine1_val = input.float(70, 'Custom Line 1 Value', group = 'STYLE')
customLine1_col = input.color(color.rgb(0, 0, 0), 'Custom Line 1 Color', group = 'STYLE')
customLine1_style = input.string('dashed', options = ['solid', 'dotted', 'dashed'], title = 'Custom Line 1 Style', group = 'STYLE')

customLine2_val = input.float(50, 'Custom Line 2 Value', group = 'STYLE')
customLine2_col = input.color(color.rgb(0, 0, 0), 'Custom Line 2 Color', group = 'STYLE')
customLine2_style = input.string('dotted', options = ['solid', 'dotted', 'dashed'], title = 'Custom Line 2 Style', group = 'STYLE')

customLine3_val = input.float(30, 'Custom Line 3 Value', group = 'STYLE')
customLine3_col = input.color(color.rgb(0, 0, 0), 'Custom Line 3 Color', group = 'STYLE')
customLine3_style = input.string('dashed', options = ['solid', 'dotted', 'dashed'], title = 'Custom Line 3 Style', group = 'STYLE')

// === CALCULATIONS ===
avg_volume = ta.sma(volume, length_sma)
var array<float> candles_score = array.new_float(length, 0.0)
is_green = close > open
float candle_score = is_green ? 1.0 : -1.0
if volume > avg_volume
    candle_score := candle_score * volume_multiplier
array.shift(candles_score)
array.push(candles_score, candle_score)
sum_scores = array.sum(candles_score)
oscillator = sum_scores / length * 50 + 50
smoothed_oscillator = ta.sma(oscillator, sma_length)

// === VISUALIZATION ===
var color gradientColor = na
if smoothed_oscillator < gradientYellow
    gradientColor := color.from_gradient(smoothed_oscillator, gradientMin, gradientYellow, color.new(color.green, 35), color.new(color.yellow, 40))
else if smoothed_oscillator < gradientOrange
    gradientColor := color.from_gradient(smoothed_oscillator, gradientYellow, gradientOrange, color.new(color.yellow, 40), color.new(color.orange, 40))
else
    gradientColor := color.from_gradient(smoothed_oscillator, gradientOrange, gradientMax, color.new(color.orange, 40), color.new(color.red, 40))

plot(smoothed_oscillator, title = 'Smoothed Oscillator', color = signalColor, linewidth = 2)
bgcolor(gradientColor)

// Reference lines (dashed) based on thresholds
if showLevels
    line.new(bar_index[1], gradientMin, bar_index, gradientMin, color = color.green, style = line.style_dashed)
    line.new(bar_index[1], gradientYellow, bar_index, gradientYellow, color = color.yellow, style = line.style_dashed)
    line.new(bar_index[1], gradientOrange, bar_index, gradientOrange, color = color.orange, style = line.style_dashed)
    line.new(bar_index[1], gradientMax, bar_index, gradientMax, color = color.red, style = line.style_dashed)
    line.new(bar_index[1], overheat_level, bar_index, overheat_level, color = color.red, style = line.style_dashed)
    line.new(bar_index[1], oversold_level, bar_index, oversold_level, color = color.green, style = line.style_dashed)
    line.new(bar_index[1], 50, bar_index, 50, color = color.gray, style = line.style_dotted)

// === CUSTOM USER-DEFINED HORIZONTAL LINES ===
hline(customLine1_val, 'Line 1', color = customLine1_col, linestyle = customLine1_style == 'solid' ? hline.style_solid : customLine1_style == 'dotted' ? hline.style_dotted : hline.style_dashed)
hline(customLine2_val, 'Line 2', color = customLine2_col, linestyle = customLine2_style == 'solid' ? hline.style_solid : customLine2_style == 'dotted' ? hline.style_dotted : hline.style_dashed)
hline(customLine3_val, 'Line 3', color = customLine3_col, linestyle = customLine3_style == 'solid' ? hline.style_solid : customLine3_style == 'dotted' ? hline.style_dotted : hline.style_dashed)

// === SENTIMENT LABELS ===
var string sentiment = ''
if smoothed_oscillator < gradientYellow
    sentiment := 'Cooled'
else if smoothed_oscillator < gradientOrange
    sentiment := 'Neutral'
else if smoothed_oscillator < overheat_level
    sentiment := 'Excited'
else
    sentiment := 'Overheated'

var table sentimentTable = table.new(position.top_right, 2, 2, border_width = 1)
if ta.crossover(smoothed_oscillator, gradientYellow) or ta.crossover(smoothed_oscillator, gradientOrange) or ta.crossover(smoothed_oscillator, overheat_level) or ta.crossunder(smoothed_oscillator, gradientYellow) or ta.crossunder(smoothed_oscillator, gradientOrange) or ta.crossunder(smoothed_oscillator, overheat_level)
    table.cell(sentimentTable, 0, 0, 'Market Sentiment:', text_color = color.white, bgcolor = color.black)
    table.cell(sentimentTable, 1, 0, sentiment, text_color = smoothed_oscillator < gradientYellow ? color.green : smoothed_oscillator < gradientOrange ? color.yellow : smoothed_oscillator < overheat_level ? color.orange : color.red, bgcolor = color.black)

// === DIVERGENCE DETECTION ===
var bool plFound = false
var bool phFound = false
var bool bullCond = false
var bool bearCond = false
bearColor = color.red
bullColor = color.green
textColor = color.white
noneColor = color.new(color.white, 100)

// Declare oscLBR for use in divergence calculations and plotting
oscLBR = smoothed_oscillator[lookbackRight]

if calculateDivergence
    // Regular Bullish Divergence
    plFound := not na(ta.pivotlow(smoothed_oscillator, lookbackLeft, lookbackRight))
    oscHL = oscLBR > ta.valuewhen(plFound, oscLBR, 1)
    lowLBR = low[lookbackRight]
    priceLL = lowLBR < ta.valuewhen(plFound, lowLBR, 1)
    bullCond := priceLL and oscHL and plFound

    // Regular Bearish Divergence
    phFound := not na(ta.pivothigh(smoothed_oscillator, lookbackLeft, lookbackRight))
    oscLH = oscLBR < ta.valuewhen(phFound, oscLBR, 1)
    highLBR = high[lookbackRight]
    priceHH = highLBR > ta.valuewhen(phFound, highLBR, 1)
    bearCond := priceHH and oscLH and phFound

// Divergence Plots
plot(
     plFound and calculateDivergence ? oscLBR : na,
     offset    = -lookbackRight,
     title     = "Regular Bullish Divergence",
     linewidth = 2,
     color     = bullCond ? bullColor : noneColor,
     display   = calculateDivergence ? display.pane : display.none,
     editable  = calculateDivergence)

plotshape(
     bullCond and calculateDivergence ? oscLBR : na,
     offset    = -lookbackRight,
     title     = "Regular Bullish Divergence Label",
     text      = " Bull ",
     style     = shape.labelup,
     location  = location.absolute,
     color     = bullColor,
     textcolor = textColor,
     display   = calculateDivergence ? display.pane : display.none,
     editable  = calculateDivergence)

plot(
     phFound and calculateDivergence ? oscLBR : na,
     offset    = -lookbackRight,
     title     = "Regular Bearish Divergence",
     linewidth = 2,
     color     = bearCond ? bearColor : noneColor,
     display   = calculateDivergence ? display.pane : display.none,
     editable  = calculateDivergence)

plotshape(
     bearCond and calculateDivergence ? oscLBR : na,
     offset    = -lookbackRight,
     title     = "Regular Bearish Divergence Label",
     text      = " Bear ",
     style     = shape.labeldown,
     location  = location.absolute,
     color     = bearColor,
     textcolor = textColor,
     display   = calculateDivergence ? display.pane : display.none,
     editable  = calculateDivergence)

// Divergence Alerts
alertcondition(bullCond, title="Regular Bullish Divergence", message="Found a new Regular Bullish Divergence, Pivot Lookback Right number of bars to the left of the current bar.")
alertcondition(bearCond, title="Regular Bearish Divergence", message="Found a new Regular Bearish Divergence, Pivot Lookback Right number of bars to the left of the current bar.")