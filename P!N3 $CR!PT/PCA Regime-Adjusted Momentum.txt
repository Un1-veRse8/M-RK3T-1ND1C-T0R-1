// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © marcosag90

//@version=6
indicator("PCA Regime-Adjusted Momentum", shorttitle="PCA-RAM")


color c_gold = #ceb70b
color c_white = color.white
color c_purple = #8236FD
color c_dark_blue = #0E0741
color c_gray = color.new(color.gray, 50)


window = input.int(50, "PCA Window Len", minval=1)
fast_smooth_len = input.int(8, "Fast Smoothing Len")
slow_smooth_len = input.int(21, "Slow Smoothing Len")
regime_lookback = input.int(365, "Regime Filter Lookback")



// Helper function to multiply each element of a float array by a scalar
f_array_mult_scalar(array<float> id, float scalar) =>
    multiplied_array = array.new<float>(array.size(id))
    for i = 0 to array.size(id) - 1
        multiplied_array.set(i, id.get(i) * scalar)
    multiplied_array

// 1.1: Standardize the input data (z-scoring)
n_open = nz((open - ta.sma(open, window)) / ta.stdev(open, window))
n_high = nz((high - ta.sma(high, window)) / ta.stdev(high, window))
n_low = nz((low - ta.sma(low, window)) / ta.stdev(low, window))
n_close = nz((close - ta.sma(close, window)) / ta.stdev(close, window))
n_vol = nz((ta.obv - ta.sma(ta.obv, window)) / ta.stdev(ta.obv, window))

// 1.2: Maintain a rolling matrix
var price_matrix = matrix.new<float>(5, window, 0)
price_matrix.add_col(price_matrix.columns(), array.from(n_open, n_high, n_low, n_close, n_vol))
price_matrix.remove_col(0)

// 1.3: Calculate eigenvalues/eigenvectors
price_matrix_transposed = price_matrix.transpose()
A = price_matrix.mult(price_matrix_transposed)
eigen = A.eigenvalues()
eigenv = A.eigenvectors()

// 1.5: Normalize the Eigenvector for consistent orientation
raw_principal_component = eigenv.col(0)
principal_component = if raw_principal_component.get(3) < 0
    f_array_mult_scalar(raw_principal_component, -1.0)
else
    raw_principal_component


// 2.1: Calculate the raw projection
raw_projection = principal_component.get(0) * n_open + 
                 principal_component.get(1) * n_high + 
                 principal_component.get(2) * n_low + 
                 principal_component.get(3) * n_close + 
                 principal_component.get(4) * n_vol

// 2.2: Smooth the projection to create momentum lines
fast_line = ta.ema(raw_projection, fast_smooth_len)
slow_line = ta.ema(raw_projection, slow_smooth_len)

// 2.3: Plot the momentum lines with your custom colors
fast_plot = plot(fast_line, title="Fast Line", color=c_white)
slow_plot = plot(slow_line, title="Slow Line", color=c_gold)
fill(fast_plot, slow_plot, fast_line>slow_line? c_white: c_gold, "Implied Momentum")
hline(0, "Zero Line", color=c_gray, linestyle=hline.style_dashed)

// 3.0 Create Alarms
if ta.crossover(fast_line, slow_line)
    alert("PCA-RAM Incipient bullish momentum")
if ta.crossunder(fast_line, slow_line)
    alert("PCA-RAM Incipiend bearish momentum")

if ta.crossover(fast_line, 0)
    alert("PCA-RAM bullish momentum confirmed")
if ta.crossunder(fast_line, 0)
    alert("PCA-RAM bearish momentum confirmed")

if ta.crossover(slow_line, 0)
    alert("PCA-RAM bullish trend confirmed")
if ta.crossunder(slow_line, 0)
    alert("PCA-RAM bearish trend confirmed")

// 3.1: Calculate the concentration ratio
total_variance = array.sum(eigen)
concentration_ratio = total_variance > 0 ? eigen.get(0) / total_variance : 0

// 3.2: Create a dynamic threshold using the recent average
avg_concentration = ta.sma(concentration_ratio, regime_lookback)

// 3.3: Visualize the ratio and its average in the data window
plot(concentration_ratio, title="Concentration Ratio", color=c_white, display=display.data_window)
plot(avg_concentration, title="Avg. Concentration", color=c_gold, display=display.data_window)

// 3.4: Color the background based on the regime, using your custom colors
regime_color = if concentration_ratio > avg_concentration
    color.new(c_purple, 80) // High-Confidence Regime
else
    color.new(c_dark_blue, 80) // Low-Confidence Regime

bgcolor(regime_color, title="Concentration Regime")
t = table.new(position.bottom_right, 1, 1, c_dark_blue, c_gold, 2)
table.cell(t, 0, 0, concentration_ratio > avg_concentration? "High Confidence in Trend":"Low Confidence in Trend", text_color = c_gold)

if ta.crossover(concentration_ratio, avg_concentration)
    alert("PCA-RAM High Confidence in Trend (Trending)")
if ta.crossunder(concentration_ratio, avg_concentration)
    alert("PCA-RAM Low Confidence in Trend (Mean Reverting)")