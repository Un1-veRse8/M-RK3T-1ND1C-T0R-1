// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © QuantNomad

//@version=6
indicator("Future Forward Curve", overlay = false)

use_spot    = input.bool(true, title = "Include Spot?")
spot_symbol = input.symbol('VIX', title = "Spot Symbol")
future_root = input.string('VX', title = 'Future Product Root')

// Colors
yldCol = input.color(color.green, "Forward Curve Color",  group = "Plots Setting")
boxCol = input.color(#696969, "Background Color",         group = "Plots Setting")
txtCol = input.color(color.white, "Text Color",           group = "Plots Setting")
backCol = input.color(color.red, "Backwardation Color", group = "Plots Setting")

fut_month_codes = array.from('F', 'G', 'H', 'J', 'K', 'M', 'N', 'Q', 'U', 'V', 'X', 'Z')

// Set Color for Yield Curve
var prdRyCol = array.new<color>(na)
if barstate.ishistory
    brt = 0
    array.push(prdRyCol, yldCol)
    // if num > 0
    //     for i = 0 to num - 1
    //         array.push(prdRyCol, 
    //          color.rgb(math.random(brt, 255), math.random(brt, 255), math.random(brt, 255), 0))

gen_futures(future_numbers) => 
    cur_year  = year(timenow)
    cur_month = month(timenow)

    month_code = future_root + fut_month_codes.get(cur_month - 1) + str.tostring(cur_year)

    code_arr = array.new_string(1, month_code)

    // ES Hack
    if str.upper(future_root) == 'ES' and cur_month % 3 != 0 
        code_arr := array.new_string()

    for i = 0 to future_numbers-2 

        cur_month += 1
        cur_year  := cur_month == 13 ? cur_year + 1 : cur_year
        cur_month := cur_month == 13 ?            1 : cur_month

        // Hack for ES Futures
        if str.upper(future_root) == 'ES' and cur_month % 3 != 0
            continue

        month_code := future_root + fut_month_codes.get(cur_month - 1) + str.tostring(cur_year)

        code_arr.push(month_code)

    code_arr

symbols = gen_futures(39)

prices        = array.new_float(0)
price_symbols = array.new_string(0)

if use_spot
    spot_price = request.security(spot_symbol, 'D', close, ignore_invalid_symbol = true, lookahead = barmerge.lookahead_on)
    prices.push(spot_price) 
    price_symbols.push(spot_symbol)

for s in symbols
    price = request.security(s, 'D', close, ignore_invalid_symbol = true, lookahead = barmerge.lookahead_on)
    if not na(price) and prices.size() < 12
        prices.push(price) 
        price_symbols.push(s)

contango = true

if prices.size() >= 4
    if prices.get(0) > prices.get(1) or prices.get(1) > prices.get(2) or prices.get(2) > prices.get(3)
        contango := false

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                  DRAWING                                   |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Plot Functions
getTime(t) =>
    str.format_time(t, "yyyy-MM-dd", syminfo.timezone)

// +++++++++ Get X-Axis
x_axis(x, inc) =>
    line.new( x, -1.2, x, -1.1, color = boxCol, style = line.style_solid)
    
    label.new(x, -1.33, str.tostring(inc), textcolor = txtCol, color = color.new(boxCol, 100), 
              style = label.style_label_center)

// +++++++++ Get Y-Axis
y_axis(yy, min, max) =>
    y = max - (1-yy)/(2/(max-min)) 
    
    line.new(bar_index, yy, bar_index - 13, yy, color = color.new(boxCol, 50), style = line.style_dashed)
    
    label.new(bar_index, yy, str.tostring(y), textcolor = txtCol, color = color.new(boxCol, 100), 
              style = label.style_label_left)

// +++++++++ Get Time Curve
scale(y, min, max) => 2/(max-min) * (y - min) - 1
scatter(x, y, max, min, col, tip, s, t) =>
    
    _tiptool = tip ? array.get(price_symbols, x) + " | " + getTime(t) +"\nPrice: " + str.tostring(y) : na
    
    label.new(bar_index - 12 + x, scale(y, min, max), "⬤", xloc.bar_index, yloc.price, 
              color.new(boxCol, 100), label.style_label_center, col, s, tooltip = _tiptool)

line(x, y, max, min, x1, y1, col, w, sty) =>   
    line.new(bar_index - 12 + x1, scale(y1, min, max), bar_index - 12 + x, scale(y, min, max), 
             color = col, style = sty, width = w)

// +++++++++ Get Legend
legend(y, t, col, sty, txt) =>    
    _x = 0

    label.new(bar_index - 15 + _x, y, "⬤", xloc.bar_index, yloc.price, color.new(boxCol, 100), 
              label.style_label_center, col, size.auto)

    line.new(bar_index - 16 , y, bar_index - 15 + _x, y, color = col, style = sty, width = 2)

    label.new(bar_index - 15 + _x, y, txt, xloc.bar_index, yloc.price, color.new(boxCol, 100), 
              label.style_label_left, col, size.auto)


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Drawing
if barstate.islast
    boxs = box.all
    if array.size(boxs) > 0
        for i = 0 to array.size(boxs) - 1
            box.delete(array.get(boxs, i))
    
    labs = label.all
    if array.size(labs) > 0
        for i = 0 to array.size(labs) - 1
            label.delete(array.get(labs, i))

    lins = line.all
    if array.size(lins) > 0
        for i = 0 to array.size(lins) - 1
            line.delete(array.get(lins, i))
    
    // Plot Frame 
    box.new(bar_index-16, 1.2, bar_index, -1.2,  color.new(txtCol, 50), 2, bgcolor = color.new(boxCol, 75))
    
    // Title
    box.new(bar_index-13, 1.5, bar_index,  1.18, color.new(txtCol, 50), 2, bgcolor = color.new(boxCol, 0), 
     text = future_root + " Future Forvard Curve", text_color = txtCol)
     
    // Legends
    box.new(bar_index-16, 1.5, bar_index-13, -1.2, color.new(txtCol, 50), 2, bgcolor = color.new(boxCol, 100))
    
    //Timeframe
    box.new(bar_index-16, 1.5, bar_index-13, 1.18, color.new(txtCol, 50), 2, bgcolor = color.new(boxCol, 0), 
     text = '' , text_color = txtCol)

    
    if prices.size() > 0
        maxVal = prices.max()
        minVal = prices.min()

        // Line Plot
        clr = array.get(prdRyCol, 0)
           
        legend(1-0.15*0, time, clr, line.style_solid, 'Live')

        for i = 0 to prices.size() - 1
            scatter(i, prices.get(i), maxVal, minVal, clr,
             true, size.normal, time)
                
            if i > 0
                line(i-1, prices.get(i-1), maxVal, minVal, 
                       i, prices.get(i), clr, 3, 
                       line.style_solid)

        // Y-axis
        yInc = array.from(-1, -0.5, 0, 0.5, 1)
        for i = 0 to array.size(yInc) - 1
            y_axis(array.get(yInc, i), minVal, maxVal)

        // Inverted Status
        if contango
            box.new(bar_index-16, -1.2, bar_index-13, -1, color.new(txtCol, 50), 2, bgcolor = color.green, 
             text = "CONTANGO" , text_color = txtCol)
        else 
            box.new(bar_index-16, -1.2, bar_index-13, -1, color.new(txtCol, 50), 2, bgcolor = backCol, 
             text = "BACKWARDATION" , text_color = txtCol)

    // X-axis
    for i = 0 to array.size(price_symbols) - 1
        x_axis_text  = str.replace(array.get(price_symbols, i), future_root, '')
        x_axis_text := str.replace(x_axis_text, '20', '')
        x_axis(bar_index-12 + i, x_axis_text)

    tbl = table.new(position.bottom_right, 1, 1, bgcolor = boxCol, border_width = 1)
    table.cell(tbl, 0, 0, text = "QuantNomad", text_color = txtCol, text_size = size.small)