// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International  
// https://creativecommons.org/licenses/by-nc-sa/4.0/
// © BigBeluga

//@version=6
indicator("Intrabar Volume Distribution [BigBeluga]", shorttitle = "IVD [BigBeluga]", overlay=true, max_boxes_count = 500, max_lines_count = 500, max_labels_count = 500)


// ＩＮＰＵＴＳ ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{
lookback = input.int(20, minval = 5)
poc_d    = input.bool(true, "POC", inline = "poc")
poc_col = input.color(color.orange, "", inline = "poc")

lbl_size = input.string("Small", "Info Size", ["Normal", "Small", "Tiny", "Auto"])

col_up = input.color(color.teal, "", inline = "color")
col_dn = input.color(color.red, "", inline = "color")

// }


// Array to store box objects
var hl            = array.new_line(lookback)
var labels        = array.new_label(lookback)
var labels_b      = array.new_label(lookback)
var labels_s      = array.new_label(lookback)
var labels_p      = array.new_label(lookback)

var line_poc    = array.new_line(lookback)
var vol_bin     = array.new<float>()

float  buyers     = 0
float sellers     = 0
float tot         = 0
float buy_per     = 0
float sell_per    = 0


// ＣＡＬＣＵＬＡＴＩＯＮＳ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――{
time_ = timeframe.in_seconds("")/60
div = time_ <= 10 ? time_ : time_ >= 60 ? 30 : 20

// Warning 
if time_ <= 5 
    label.delete(label.new(bar_index+3, hl2, "Use Higher Timeframes from\n5 min", style = label.style_label_center, color = color.orange)[1])


array<float>    req         = request.security_lower_tf('', str.tostring(int(time_/div)), volume)
array<float>    price       = request.security_lower_tf('', str.tostring(int(time_/div)), close)

array<float>    delta_sign  = request.security_lower_tf('', str.tostring(int(time_/div)), (close > open ? volume : -volume))

if delta_sign.size() > 0

    for i = 0 to delta_sign.size() - 1 

        value       = delta_sign.get(i)
        buyers      := buyers + (value > 0 ? value : 0)
        sellers     := sellers + (value < 0 ? -value : 0)
        tot         := buyers + sellers
        buy_per     := (buyers / tot) * 100
        sell_per    := (sellers / tot) * 100



// Clear existing objects on the first run
if barstate.islast and time_ >= 5 

    l_size = switch lbl_size
        "Normal" => size.normal
        "Small" => size.small
        "Tiny" => size.tiny
        => size.auto


    for i = 0 to lookback - 1
        line.delete(hl.get(i))
        label.delete(labels.get(i))
        label.delete(labels_b.get(i))
        label.delete(labels_s.get(i))
        label.delete(labels_p.get(i))
        line.delete(line_poc.get(i))
    
    for i = 0 to lookback - 1
        h = high[i]
        l = low[i]
        o = open[i]
        c = close[i]

        vol = req[i]
        pr = price[i]
        bot  = c > o ? o : c
        top  = c > o ? c : o
        step = (h - l) / 100  
        step1 = (top - bot) / 100 

        array.clear(vol_bin)

        for k = 0 to 99
            vol_bin.push(0.0)

        // Fill volume bins
        if vol.size() > 0
            for j = 0 to pr.size() - 1
                clos = pr.get(j)
                vol_ = vol.get(j)
                if clos >= l and clos <= h
                    bin_index = int(math.floor((clos - l) / step))
                    bin_index := math.min(bin_index, 99)  
                    vol_bin.set(bin_index, vol_bin.get(bin_index) + vol_)

        // Find POC
        max_vol = vol_bin.max()
        poc_index = vol_bin.indexof(max_vol)
        poc_price = l + step * poc_index

        // Plot POC level
        if poc_d
            array.set(line_poc, i,
                 line.new(
                         bar_index-i
                         , poc_price
                         , bar_index+1
                         , poc_price
                         , color = poc_col
                         , style = line.style_dashed
                         )
                 )

                 
        // Plot POC label
        if poc_d
            array.set(labels_p, i,
             label.new(
                 bar_index - i,
                 poc_price,
                 "--------",
                 color=color.new(color.red, 100),
                 textcolor=poc_col,
                 style=label.style_label_center,
                 size=size.auto
                 )
             )

        candle_col = c > o ? col_up : col_dn

        
        array.set(hl, i, 
                     line.new(
                               bar_index- i
                              , h
                              , bar_index-i
                              , l
                              , style = line.style_solid
                              , color = candle_col
                              )
                  )

        array.set(labels_b, i, 
                     label.new(
                                 bar_index - i
                                 , bot+step1*buy_per[i]
                                 , "      ══"
                                 , color = color(na)
                                 , force_overlay = true
                                 , style = label.style_label_center
                                 , size = size.auto
                                 , textcolor = col_up
                                 )
                     )


        array.set(labels_s, i, 
                     label.new(
                                 bar_index - i
                                 , bot+step1*sell_per[i]
                                 , "══      "
                                 , color = color(na)
                                 , force_overlay = true
                                 , style = label.style_label_center
                                 , size = size.auto
                                 , textcolor = col_dn
                                 )
                     )



        array.set(labels, i, 
                     label.new(
                                 bar_index - i
                                 , top
                                 , "Sᴇʟʟ" + "  " + "Bᴜʏ\n" + str.tostring(sell_per[i], "##") + "%" + "  " + str.tostring(math.round(buy_per[i]), "##") + "%" 
                                 , color = color(na)
                                 , force_overlay = true
                                 , style = label.style_label_down
                                 , size = l_size
                                 , textcolor = chart.fg_color
                                 )
                     )

        if poc_d
            for j = line_poc.size() -1 to 0 
                line_id = line_poc.get(j)
                level = line_id.get_y1()
                
                for s = lookback -1 to 0

                    if high[s] > level and low[s] < level and bar_index[s] > line_id.get_x1()
            
                        line.delete(line_id)

    // Start of the Period
    line.delete(line.new(bar_index-lookback,high[lookback], bar_index-lookback,high[lookback], extend = extend.both, color = color.gray)[1])
    label.delete(label.new(bar_index-lookback,high[lookback], ">", force_overlay = true, color = color.gray, style = label.style_label_center)[1])

// }